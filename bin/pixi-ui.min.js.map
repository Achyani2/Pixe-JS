{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/SliceSprite.js","pixi-ui.min.js","src/Text.js","src/UIBase.js","src/UIContainer.js","src/UISettings.js","src/index"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","SliceSprite","sprite","borderWidth","horizontalSlice","verticalSlice","UIBase","this","width","height","ftl","ftr","fbl","fbr","ft","fb","fl","fr","ff","stl","str","sbl","sbr","st","sb","sl","sr","sf","bw","vs","hs","texture","baseTexture","frame","PIXI","Rectangle","x","y","Sprite","Texture","container","addChild","setting","minWidth","minHeight","prototype","Object","create","constructor","update","tint","./UIBase","2","Text","text","PIXITextStyle","3","Container","UISettings","children","parent","updatesettings","baseupdate","updateChildren","parentWidth","window","innerWidth","parentHeight","innerHeight","_height","_width","widthPct","heightPct","minWidthPct","minHeightPct","maxWidthPct","maxWidth","maxHeightPct","maxHeight","leftPct","left","rightPct","right","topPct","top","bottomPct","bottom","anchorLeftPct","anchorLeft","anchorRightPct","anchorRight","anchorTopPct","anchorTop","anchorBottomPct","anchorBottom","horizontalAlign","useHorizontalAnchor","useLeftRight","position","pivotX","verticalAlign","useVerticalAnchor","useTopBottom","pivotY","scaleX","scale","scaleY","pivot","Math","round","UIObject","argumentsLength","arguments","removeChild","push","indexOf","splice","defineProperties","get","set","val","isNaN","replace","parseFloat","percentageMinWidth","percentageMinHeight","./UISettings","4","UIContainer","console","log","5","6","UI","assign","./SliceSprite","./Text","./UIContainer"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCaA,QAAAK,GAAAC,EAAAC,EAAAC,EAAAC,GACAC,EAAAT,KAAAU,KAAAL,EAAAM,MAAAN,EAAAO,OAEA,IAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAzB,GAAA,EACA0B,EAAA,mBAAAxB,IAAAA,EACAyB,EAAA,mBAAA1B,IAAAA,EACArB,EAAAmB,EAAA6B,QAAAC,YACAxC,EAAAU,EAAA6B,QAAAE,KAIAJ,IAAAC,GACApB,EAAA,GAAAwB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAAT,EAAAA,GACAjB,EAAA,GAAAuB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAAgB,MAAAoB,EAAApC,EAAA6C,EAAAT,EAAAA,GACAhB,EAAA,GAAAsB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAA7C,EAAAiB,OAAAmB,EAAAA,EAAAA,GACAf,EAAA,GAAAqB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAAgB,MAAAoB,EAAApC,EAAA6C,EAAA7C,EAAAiB,OAAAmB,EAAAA,EAAAA,GACAd,EAAA,GAAAoB,MAAAC,UAAA3C,EAAA4C,EAAAR,EAAApC,EAAA6C,EAAA7C,EAAAgB,MAAA,EAAAoB,EAAAA,GACAb,EAAA,GAAAmB,MAAAC,UAAA3C,EAAA4C,EAAAR,EAAApC,EAAA6C,EAAA7C,EAAAiB,OAAAmB,EAAApC,EAAAgB,MAAA,EAAAoB,EAAAA,GACAZ,EAAA,GAAAkB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAAT,EAAAA,EAAApC,EAAAiB,OAAA,EAAAmB,GACAX,EAAA,GAAAiB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAAgB,MAAAoB,EAAApC,EAAA6C,EAAAT,EAAAA,EAAApC,EAAAiB,OAAA,EAAAmB,GACAV,EAAA,GAAAgB,MAAAC,UAAA3C,EAAA4C,EAAAR,EAAApC,EAAA6C,EAAAT,EAAApC,EAAAgB,MAAA,EAAAoB,EAAApC,EAAAiB,OAAA,EAAAmB,IAEAE,GACAd,EAAA,GAAAkB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAAT,EAAApC,EAAAiB,QACAQ,EAAA,GAAAiB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAAgB,MAAAoB,EAAApC,EAAA6C,EAAAT,EAAApC,EAAAiB,QACAS,EAAA,GAAAgB,MAAAC,UAAA3C,EAAA4C,EAAAR,EAAApC,EAAA6C,EAAA7C,EAAAgB,MAAA,EAAAoB,EAAApC,EAAAiB,UAGAK,EAAA,GAAAoB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAA7C,EAAAgB,MAAAoB,GACAb,EAAA,GAAAmB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAA7C,EAAAiB,OAAAmB,EAAApC,EAAAgB,MAAAoB,GACAV,EAAA,GAAAgB,MAAAC,UAAA3C,EAAA4C,EAAA5C,EAAA6C,EAAAT,EAAApC,EAAAgB,MAAAhB,EAAAiB,OAAA,EAAAmB,IAQAD,EAAA,GAAAO,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAAmC,IACAX,KAAAiC,UAAAC,SAAAd,GACAE,GAAAC,IACAX,EAAA,GAAAe,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAA2B,IACAU,EAAA,GAAAc,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAA4B,IACAU,EAAA,GAAAa,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAA6B,IACAU,EAAA,GAAAY,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAA8B,IACAN,KAAAiC,UAAAC,SAAAtB,EAAAC,EAAAC,EAAAC,IAGAQ,IACAvB,KAAAmC,QAAAC,SAAA,EAAAf,EACAH,EAAA,GAAAS,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAAiC,IACAU,EAAA,GAAAQ,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAAkC,IACAV,KAAAiC,UAAAC,SAAAhB,EAAAC,IAEAG,IACAtB,KAAAmC,QAAAE,UAAA,EAAAhB,EACAL,EAAA,GAAAW,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAA+B,IACAU,EAAA,GAAAU,MAAAI,OAAA,GAAAJ,MAAAK,QAAAxD,EAAAgC,IACAR,KAAAiC,UAAAC,SAAAlB,EAAAC,IAIAK,GAAAC,IAAAP,EAAAa,EAAAZ,EAAAY,EAAAX,EAAAY,EAAAX,EAAAW,EAAAlB,EAAAX,MAAAY,EAAAZ,MAAAa,EAAAb,MAAAc,EAAAd,MAAAW,EAAAV,OAAAW,EAAAX,OAAAY,EAAAZ,OAAAa,EAAAb,OAAAmB,GACAE,IAAAH,EAAAS,EAAAX,EAAAjB,MAAAkB,EAAAlB,MAAAoB,GACAC,IAAAF,EAAAU,EAAAd,EAAAd,OAAAe,EAAAf,OAAAmB,GA9EA,GAAAtB,GAAAhB,EAAA,WAiFAW,GAAA4C,UAAAC,OAAAC,OAAAzC,EAAAuC,WACA5C,EAAA4C,UAAAG,YAAA/C,EACAD,EAAAJ,QAAAK,EAOAA,EAAA4C,UAAAI,OAAA,WACApB,IAAAC,IACAV,IAAAgB,EAAAd,IAAAc,EAAAV,GAAAU,EAAA7B,KAAAC,MAAAoB,GACAP,IAAAgB,EAAAf,IAAAe,EAAAb,GAAAa,EAAA9B,KAAAE,OAAAmB,GACAD,GAAAnB,MAAAe,GAAAf,MAAAgB,GAAAhB,MAAAD,KAAAC,MAAA,EAAAoB,GACAD,GAAAlB,OAAAgB,GAAAhB,OAAAiB,GAAAjB,OAAAF,KAAAE,OAAA,EAAAmB,IAEAE,IACAJ,GAAAU,EAAA7B,KAAAC,MAAAoB,GACAH,GAAAhB,OAAAiB,GAAAjB,OAAAkB,GAAAlB,OAAAF,KAAAE,OACAkB,GAAAnB,MAAAD,KAAAC,MAAA,EAAAoB,KAGAJ,GAAAa,EAAA9B,KAAAE,OAAAmB,GACAL,GAAAf,MAAAgB,GAAAhB,MAAAmB,GAAAnB,MAAAD,KAAAC,MACAmB,GAAAlB,OAAAF,KAAAE,OAAA,EAAAmB,IAGA,MAAArB,KAAA2C,OACAvB,GAAAuB,KAAA3C,KAAA2C,KACArB,IAAAC,KAAAX,IAAA+B,KAAA9B,IAAA8B,KAAA7B,IAAA6B,KAAA5B,IAAA4B,KAAA3C,KAAA2C,MACApB,KAAAL,GAAAyB,KAAAxB,GAAAwB,KAAA3C,KAAA2C,MACArB,KAAAN,GAAA2B,KAAA1B,GAAA0B,KAAA3C,KAAA2C,UCMGC,WAAW,IAAIC,GAAG,SAAS9D,EAAQU,EAAOJ,GC3G7C,QAAAyD,GAAAC,EAAAC,GACAhD,KAAA+C,KAAA,GAAApB,MAAAmB,KAAAC,EAAAC,GACAjD,EAAAT,KAAAU,KAAAA,KAAA+C,KAAA9C,MAAAD,KAAA+C,KAAA7C,QACAF,KAAAiC,UAAAC,SAAAlC,KAAA+C,MAdA,GAAAhD,GAAAhB,EAAA,WAiBA+D,GAAAR,UAAAC,OAAAC,OAAAzC,EAAAuC,WACAQ,EAAAR,UAAAG,YAAAK,EACArD,EAAAJ,QAAAyD,EAOAA,EAAAR,UAAAI,OAAA,WACA,MAAA1C,KAAA2C,OACAI,KAAAJ,KAAA3C,KAAA2C,SD2HGC,WAAW,IAAIK,GAAG,SAASlE,EAAQU,EAAOJ,GE7I7C,QAAAU,GAAAE,EAAAC,GACAF,KAAAiC,UAAA,GAAAN,MAAAuB,UACAlD,KAAAmC,QAAA,GAAAgB,GACAnD,KAAAoD,YACApD,KAAAqD,OAAA,KACArD,KAAAC,MAAAA,GAAA,EACAD,KAAAE,OAAAA,GAAA,EAhBA,GAAAiD,GAAApE,EAAA,eAmBAgB,GAAAuC,UAAAG,YAAA1C,EACAN,EAAAJ,QAAAU,EAOAA,EAAAuC,UAAAgB,eAAA,WACAtD,KAAAuD,aACAvD,KAAA0C,SACA1C,KAAAwD,kBAQAzD,EAAAuC,UAAAI,OAAA,aAQA3C,EAAAuC,UAAAiB,WAAA,WACA,GAAAE,GAAA,MAAAzD,KAAAqD,OAAArD,KAAAqD,OAAApD,MAAAyD,OAAAC,WACAC,EAAA,MAAA5D,KAAAqD,OAAArD,KAAAqD,OAAAnD,OAAAwD,OAAAG,WAkCA,IAjCA7D,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAA2B,QACA9D,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAA4B,OAGA,MAAA/D,KAAAmC,QAAA6B,WACAhE,KAAAmC,QAAAlC,MAAAwD,EAAAzD,KAAAmC,QAAA6B,UACA,MAAAhE,KAAAmC,QAAA8B,YACAjE,KAAAmC,QAAAjC,OAAA0D,EAAA5D,KAAAmC,QAAA8B,WACA,MAAAjE,KAAAmC,QAAA+B,cACAlE,KAAAmC,QAAAC,SAAAqB,EAAAzD,KAAAmC,QAAA+B,aACA,MAAAlE,KAAAmC,QAAAgC,eACAnE,KAAAmC,QAAAE,UAAAuB,EAAA5D,KAAAmC,QAAAgC,cACA,MAAAnE,KAAAmC,QAAAiC,cACApE,KAAAmC,QAAAkC,SAAAZ,EAAAzD,KAAAmC,QAAAiC,aACA,MAAApE,KAAAmC,QAAAmC,eACAtE,KAAAmC,QAAAoC,UAAAX,EAAA5D,KAAAmC,QAAAmC,cACA,MAAAtE,KAAAmC,QAAAqC,UACAxE,KAAAmC,QAAAsC,KAAAhB,EAAAzD,KAAAmC,QAAAqC,SACA,MAAAxE,KAAAmC,QAAAuC,WACA1E,KAAAmC,QAAAwC,MAAAlB,EAAAzD,KAAAmC,QAAAuC,UACA,MAAA1E,KAAAmC,QAAAyC,SACA5E,KAAAmC,QAAA0C,IAAAjB,EAAA5D,KAAAmC,QAAAyC,QACA,MAAA5E,KAAAmC,QAAA2C,YACA9E,KAAAmC,QAAA4C,OAAAnB,EAAA5D,KAAAmC,QAAA2C,WACA,MAAA9E,KAAAmC,QAAA6C,gBACAhF,KAAAmC,QAAA8C,WAAAxB,EAAAzD,KAAAmC,QAAA6C,eACA,MAAAhF,KAAAmC,QAAA+C,iBACAlF,KAAAmC,QAAAgD,YAAA1B,EAAAzD,KAAAmC,QAAA+C,gBACA,MAAAlF,KAAAmC,QAAAiD,eACApF,KAAAmC,QAAAkD,UAAAzB,EAAA5D,KAAAmC,QAAAiD,cACA,MAAApF,KAAAmC,QAAAmD,kBACAtF,KAAAmC,QAAAoD,aAAA3B,EAAA5D,KAAAmC,QAAAmD,iBAEA,MAAAtF,KAAAwF,gBAAA,CAEA,GAAAP,GAAAjF,KAAAiF,WACAE,EAAAnF,KAAAmF,WACA,OAAAF,GAAA,MAAAE,GAAA,MAAAnF,KAAA2E,MACAQ,EAAAnF,KAAA2E,MACA,MAAAM,GAAA,MAAAE,GAAA,MAAAnF,KAAAyE,KACAQ,EAAAjF,KAAAyE,KACA,MAAAQ,GAAA,MAAAE,GAAA,MAAAnF,KAAAyE,MAAA,MAAAzE,KAAA2E,QACAM,EAAAjF,KAAAyE,KACAU,EAAAnF,KAAA2E,MAGA,IAAAc,GAAA,MAAAR,GAAA,MAAAE,EACAO,GAAAD,IAAA,MAAAzF,KAAAyE,MAAA,MAAAzE,KAAA2E,MAEAe,GACA,MAAA1F,KAAAyE,KACAzE,KAAAiC,UAAA0D,SAAA9D,EAAA7B,KAAAyE,KACA,MAAAzE,KAAA2E,QACA3E,KAAAiC,UAAA0D,SAAA9D,EAAA4B,EAAAzD,KAAA2E,OAEAc,GACA,MAAAR,GAAA,MAAAE,EACAnF,KAAAiC,UAAA0D,SAAA9D,EAAAoD,EACA,MAAAA,GAAA,MAAAE,EACAnF,KAAAiC,UAAA0D,SAAA9D,EAAA4B,EAAAzD,KAAAC,MAAAkF,EACA,MAAAF,GAAA,MAAAE,IACAnF,KAAAiC,UAAA0D,SAAA9D,EAAAoD,EACAjF,KAAAmC,QAAAlC,MAAAwD,EAAAwB,EAAAE,GAEAnF,KAAAiC,UAAA0D,SAAA9D,GAAA7B,KAAA4F,OAAA5F,KAAAmC,QAAAlC,OAGAD,KAAAiC,UAAA0D,SAAA9D,EAAA,EAIA,GAAA,MAAA7B,KAAA6F,cAAA,CAEA,GAAAR,GAAArF,KAAAqF,UACAE,EAAAvF,KAAAuF,YACA,OAAAF,GAAA,MAAAE,GAAA,MAAAvF,KAAA+E,SACAQ,EAAAvF,KAAA+E,QACA,MAAAM,GAAA,MAAAE,GAAA,MAAAvF,KAAA6E,MACAQ,EAAArF,KAAA6E,IAEA,IAAAiB,GAAA,MAAAT,GAAA,MAAAE,EACAQ,GAAAD,IAAA,MAAA9F,KAAA6E,KAAA,MAAA7E,KAAA+E,OAEAgB,GACA,MAAA/F,KAAA6E,IACA7E,KAAAiC,UAAA0D,SAAA7D,EAAA9B,KAAA6E,IACA,MAAA7E,KAAA+E,SACA/E,KAAAiC,UAAA0D,SAAA7D,EAAA8B,EAAA5D,KAAA+E,QAEAe,GACA,MAAAT,GAAA,MAAAE,EACAvF,KAAAiC,UAAA0D,SAAA7D,EAAAuD,EACA,MAAAA,GAAA,MAAAE,EACAvF,KAAAiC,UAAA0D,SAAA7D,EAAA8B,EAAA5D,KAAAE,OAAAqF,EACA,MAAAF,GAAA,MAAAE,IACAvF,KAAAiC,UAAA0D,SAAA7D,EAAAuD,EACArF,KAAAmC,QAAAjC,OAAA0D,EAAAyB,EAAAE,GAEAvF,KAAAiC,UAAA0D,SAAA7D,GAAA9B,KAAAgG,OAAAhG,KAAAmC,QAAAlC,OAGAD,KAAAiC,UAAA0D,SAAA7D,EAAA,EAKA,MAAA9B,KAAAmC,QAAAkC,UAAArE,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAAkC,WAAArE,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAAkC,UACArE,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAAC,WAAApC,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAAC,UAEA,MAAApC,KAAAmC,QAAAoC,WAAAvE,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAAoC,YAAAvE,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAAoC,WACAvE,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAAE,YAAArC,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAAE,WAIA,MAAArC,KAAAwF,kBACA,UAAAxF,KAAAwF,gBACAxF,KAAAiC,UAAA0D,SAAA9D,EAAA,GAAA4B,EAAA,GAAAzD,KAAAC,MACA,SAAAD,KAAAwF,gBACAxF,KAAAiC,UAAA0D,SAAA9D,EAAA4B,EAAAzD,KAAAC,MAEAD,KAAAiC,UAAA0D,SAAA9D,EAAA,EACA7B,KAAAiC,UAAA0D,SAAA9D,GAAA7B,KAAAC,MAAAD,KAAA4F,QAEA,MAAA5F,KAAA6F,gBACA,UAAA7F,KAAA6F,cACA7F,KAAAiC,UAAA0D,SAAA7D,EAAA,GAAA8B,EAAA,GAAA5D,KAAAE,OACA,UAAAF,KAAA6F,cACA7F,KAAAiC,UAAA0D,SAAA7D,EAAA8B,EAAA5D,KAAAE,OAEAF,KAAAiC,UAAA0D,SAAA7D,EAAA,EACA9B,KAAAiC,UAAA0D,SAAA7D,GAAA9B,KAAAE,OAAAF,KAAAgG,QAMA,MAAAhG,KAAAmC,QAAA8D,SAAAjG,KAAAiC,UAAAiE,MAAArE,EAAA7B,KAAAmC,QAAA8D,QACA,MAAAjG,KAAAmC,QAAAgE,SAAAnG,KAAAiC,UAAAiE,MAAApE,EAAA9B,KAAAmC,QAAAgE,QAGA,MAAAnG,KAAAmC,QAAAyD,SAAA5F,KAAAiC,UAAAmE,MAAAvE,EAAA7B,KAAAmC,QAAAlC,MAAAD,KAAAmC,QAAAyD,QACA,MAAA5F,KAAAmC,QAAA6D,SAAAhG,KAAAiC,UAAAmE,MAAAtE,EAAA9B,KAAAmC,QAAAjC,OAAAF,KAAAmC,QAAA6D,QAEAhG,KAAAiC,UAAA0D,SAAA9D,EAAAwE,KAAAC,MAAAtG,KAAAiC,UAAA0D,SAAA9D,GACA7B,KAAAiC,UAAA0D,SAAA7D,EAAAuE,KAAAC,MAAAtG,KAAAiC,UAAA0D,SAAA7D,IAQA/B,EAAAuC,UAAAkB,eAAA,WACA,IAAA,GAAAxE,GAAA,EAAAA,EAAAgB,KAAAoD,SAAA7D,OAAAP,IACAgB,KAAAoD,SAAApE,GAAAsE,kBAIAvD,EAAAuC,UAAAJ,SAAA,SAAAqE,GACA,GAAAC,GAAAC,UAAAlH,MACA,IAAAiH,EAAA,EACA,IAAA,GAAAxH,GAAA,EAAAA,EAAAwH,EAAAxH,IACAgB,KAAAkC,SAAAuE,UAAAzH,QAIAuH,GAAAlD,QACAkD,EAAAlD,OAAAqD,YAAAH,GAGAA,EAAAlD,OAAArD,KACAA,KAAAiC,UAAAC,SAAAqE,EAAAtE,WACAjC,KAAAoD,SAAAuD,KAAAJ,GACAvG,KAAAsD,gBAGA,OAAAiD,IAGAxG,EAAAuC,UAAAoE,YAAA,SAAAH,GACA,GAAAvH,GAAAgB,KAAAoD,SAAAwD,QAAAL,EACAvH,SACAgB,KAAAiC,UAAAyE,YAAAH,EAAAtE,WACAjC,KAAAoD,SAAAyD,OAAA7H,EAAA,GACAuH,EAAAlD,OAAA,OAIAd,OAAAuE,iBAAA/G,EAAAuC,WACArC,OACA8G,IAAA,WACA,MAAA/G,MAAAmC,QAAAlC,OAEA+G,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAA6B,SAAA,IAAAoD,WAAAH,KAGAjH,KAAAmC,QAAA6B,SAAA,KACAhE,KAAAmC,QAAA4B,OAAAkD,GAEAjH,KAAAsD,mBAGApD,QACA6G,IAAA,WACA,MAAA/G,MAAAmC,QAAAjC,QAEA8G,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAA8B,UAAA,IAAAmD,WAAAH,KAGAjH,KAAAmC,QAAA8B,UAAA,KACAjE,KAAAmC,QAAA2B,QAAAmD,GAEAjH,KAAAsD,mBAGAlB,UACA2E,IAAA,WACA,MAAA/G,MAAAmC,QAAAC,UAEA4E,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAkF,mBAAA,IAAAD,WAAAH,KAGAjH,KAAAmC,QAAAkF,mBAAA,KACArH,KAAAmC,QAAAC,SAAA6E,GAEAjH,KAAAsD,mBAGAjB,WACA0E,IAAA,WACA,MAAA/G,MAAAmC,QAAAE,WAEA2E,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAmF,oBAAA,IAAAF,WAAAH,KAGAjH,KAAAmC,QAAAmF,oBAAA,KACAtH,KAAAmC,QAAAE,UAAA4E,GAEAjH,KAAAsD,mBAGAe,UACA0C,IAAA,WACA,MAAA/G,MAAAmC,QAAAkC,UAEA2C,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAiC,YAAA,IAAAgD,WAAAH,KAGAjH,KAAAmC,QAAAiC,YAAA,KACApE,KAAAmC,QAAAkC,SAAA4C,GAEAjH,KAAAsD,mBAGAiB,WACAwC,IAAA,WACA,MAAA/G,MAAAmC,QAAAoC,WAEAyC,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAmC,aAAA,IAAA8C,WAAAH,KAGAjH,KAAAmC,QAAAmC,aAAA,KACAtE,KAAAmC,QAAAoC,UAAA0C,GAEAjH,KAAAsD,mBAGA2B,YACA8B,IAAA,WACA,MAAA/G,MAAAmC,QAAA8C,YAEA+B,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAA6C,cAAA,IAAAoC,WAAAH,KAGAjH,KAAAmC,QAAA6C,cAAA,KACAhF,KAAAmC,QAAA8C,WAAAgC,GAEAjH,KAAAsD,mBAGA6B,aACA4B,IAAA,WACA,MAAA/G,MAAAmC,QAAAgD,aAEA6B,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAA+C,eAAA,IAAAkC,WAAAH,KAGAjH,KAAAmC,QAAA+C,eAAA,KACAlF,KAAAmC,QAAAgD,YAAA8B,GAEAjH,KAAAsD,mBAGA+B,WACA0B,IAAA,WACA,MAAA/G,MAAAmC,QAAAkD,WAEA2B,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAiD,aAAA,IAAAgC,WAAAH,KAGAjH,KAAAmC,QAAAiD,aAAA,KACApF,KAAAmC,QAAAkD,UAAA4B,GAEAjH,KAAAsD,mBAGAiC,cACAwB,IAAA,WACA,MAAA/G,MAAAmC,QAAAoD,cAEAyB,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAmD,gBAAA,IAAA8B,WAAAH,KAGAjH,KAAAmC,QAAAmD,gBAAA,KACAtF,KAAAmC,QAAAoD,aAAA0B,GAEAjH,KAAAsD,mBAGAuC,eACAkB,IAAA,WACA,MAAA/G,MAAAmC,QAAA0D,eAEAmB,IAAA,SAAAC,GACAjH,KAAAmC,QAAA0D,cAAAoB,EACAjH,KAAAsD,mBAGAkC,iBACAuB,IAAA,WACA,MAAA/G,MAAAmC,QAAAqD,iBAEAwB,IAAA,SAAAC,GACAjH,KAAAmC,QAAAqD,gBAAAyB,EACAjH,KAAAsD,mBAGAX,MACAoE,IAAA,WACA,MAAA/G,MAAAmC,QAAAQ,MAEAqE,IAAA,SAAAC,GACAjH,KAAAmC,QAAAQ,KAAAsE,EACAjH,KAAA0C,WAGAkD,QACAmB,IAAA,WACA,MAAA/G,MAAAmC,QAAAyD,QAEAoB,IAAA,SAAAC,GACAjH,KAAAmC,QAAAyD,OAAAqB,EACAjH,KAAAsD,mBAGA0C,QACAe,IAAA,WACA,MAAA/G,MAAAmC,QAAA6D,QAEAgB,IAAA,SAAAC,GACAjH,KAAAmC,QAAA6D,OAAAiB,EACAjH,KAAAsD,mBAGA8C,OACAY,IAAA,SAAAC,GACAjH,KAAAmC,QAAAyD,OAAAqB,EACAjH,KAAAmC,QAAA6D,OAAAiB,EACAjH,KAAAsD,mBAGA2C,QACAc,IAAA,WACA,MAAA/G,MAAAmC,QAAA8D,QAEAe,IAAA,SAAAC,GACAjH,KAAAmC,QAAA8D,OAAAgB,EACAjH,KAAAsD,mBAGA6C,QACAY,IAAA,WACA,MAAA/G,MAAAmC,QAAAgE,QAEAa,IAAA,SAAAC,GACAjH,KAAAmC,QAAAgE,OAAAc,EACAjH,KAAAsD,mBAGA4C,OACAc,IAAA,SAAAC,GACAjH,KAAAmC,QAAA8D,OAAAgB,EACAjH,KAAAmC,QAAAgE,OAAAc,EACAjH,KAAAsD,mBAGAmB,MACAsC,IAAA,WACA,MAAA/G,MAAAmC,QAAAsC,MAEAuC,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAqC,QAAA,IAAA4C,WAAAH,KAGAjH,KAAAmC,QAAAqC,QAAA,KACAxE,KAAAmC,QAAAsC,KAAAwC,GAEAjH,KAAAsD,mBAGAqB,OACAoC,IAAA,WACA,MAAA/G,MAAAmC,QAAAwC,OAEAqC,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAuC,SAAA,IAAA0C,WAAAH,KAGAjH,KAAAmC,QAAAuC,SAAA,KACA1E,KAAAmC,QAAAwC,MAAAsC,GAEAjH,KAAAsD,mBAGAuB,KACAkC,IAAA,WACA,MAAA/G,MAAAmC,QAAA0C,KAEAmC,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAAyC,OAAA,IAAAwC,WAAAH,KAGAjH,KAAAmC,QAAAyC,OAAA,KACA5E,KAAAmC,QAAA0C,IAAAoC,GAEAjH,KAAAsD,mBAGAyB,QACAgC,IAAA,WACA,MAAA/G,MAAAmC,QAAA4C,QAEAiC,IAAA,SAAAC,GACAC,MAAAD,IAAAA,EAAAL,QAAA,UACAK,EAAAA,EAAAE,QAAA,IAAA,IACAnH,KAAAmC,QAAA2C,UAAA,IAAAsC,WAAAH,KAGAjH,KAAAmC,QAAA2C,UAAA,KACA9E,KAAAmC,QAAA4C,OAAAkC,GAEAjH,KAAAsD,mBAGAzB,GACAkF,IAAA,WACA,MAAA/G,MAAAmC,QAAAsC,MAEAuC,IAAA,SAAAC,GACAjH,KAAAyE,KAAAwC,IAGAnF,GACAiF,IAAA,WACA,MAAA/G,MAAAmC,QAAAwC,OAEAqC,IAAA,SAAAC,GACAjH,KAAA6E,IAAAoC,QF6JGM,eAAe,IAAIC,GAAG,SAASzI,EAAQU,EAAOJ,GG1rBjD,QAAAoI,GAAAxH,EAAAC,GACAH,EAAAT,KAAAU,KAAAC,EAAAC,GAZA,GAAAH,GAAAhB,EAAA,WAeA2I,SAAAC,IAAA5H,GAEA0H,EAAAnF,UAAAC,OAAAC,OAAAzC,EAAAuC,WACAmF,EAAAnF,UAAAG,YAAAgF,EACAhI,EAAAJ,QAAAoI,IHysBG7E,WAAW,IAAIgF,GAAG,SAAS7I,EAAQU,EAAOJ,GIttB7C,QAAA8D,KACAnD,KAAA+D,OAAA,EACA/D,KAAAC,MAAA,EACAD,KAAAgE,SAAA,KACAhE,KAAA8D,QAAA,EACA9D,KAAAE,OAAA,EACAF,KAAAiE,UAAA,KACAjE,KAAAoC,SAAA,EACApC,KAAAkE,YAAA,KACAlE,KAAAqC,UAAA,EACArC,KAAAmE,aAAA,KACAnE,KAAAqE,SAAA,KACArE,KAAAoE,YAAA,KACApE,KAAAuE,UAAA,KACAvE,KAAAsE,aAAA,KACAtE,KAAAyE,KAAA,KACAzE,KAAAwE,QAAA,KACAxE,KAAA2E,MAAA,KACA3E,KAAA0E,SAAA,KACA1E,KAAA6E,IAAA,KACA7E,KAAA4E,OAAA,KACA5E,KAAA+E,OAAA,KACA/E,KAAA8E,UAAA,KACA9E,KAAAiF,WAAA,KACAjF,KAAAgF,cAAA,KACAhF,KAAAmF,YAAA,KACAnF,KAAAkF,eAAA,KACAlF,KAAAqF,UAAA,KACArF,KAAAoF,aAAA,KACApF,KAAAuF,aAAA,KACAvF,KAAAsF,gBAAA,KACAtF,KAAA4F,OAAA,KACA5F,KAAAgG,OAAA,KACAhG,KAAAiG,OAAA,KACAjG,KAAAmG,OAAA,KACAnG,KAAA6F,cAAA,KACA7F,KAAAwF,gBAAA,KACAxF,KAAA2C,KAAA,KAIAlD,EAAAJ,QAAA8D,OJiuBM0E,GAAG,SAAS9I,EAAQU,EAAOJ,GKhxBjC,GAAAyI,IACA3E,WAAApE,EAAA,gBACAgB,OAAAhB,EAAA,YACA0I,YAAA1I,EAAA,iBACAW,YAAAX,EAAA,iBACA+D,KAAA/D,EAAA,UAKAwD,QAAAwF,OAAApG,KAAAmG,GAAAA,GAEArI,EAAAJ,QAAAyI,ILmxBGE,gBAAgB,EAAEC,SAAS,EAAErF,WAAW,EAAEsF,gBAAgB,EAAEX,eAAe,SAAS","file":"pixi-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * A sliced sprite with dynamic width and height.\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Sprite {PIXI.Sprite} the sprite for this SliceSprite\r\n * @param BorderWidth {Number} Width of the sprite borders\r\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\r\n * @param horizontalSlice {Boolean} Slice the sprite vertically\r\n */\r\nfunction SliceSprite(sprite, borderWidth, horizontalSlice, verticalSlice) {\r\n    UIBase.call(this, sprite.width, sprite.height);\r\n\r\n    var ftl, ftr, fbl, fbr, ft, fb, fl, fr, ff, stl, str, sbl, sbr, st, sb, sl, sr, sf,\r\n        bw = borderWidth || 5,\r\n        vs = typeof verticalSlice !== \"undefined\" ? verticalSlice : true,\r\n        hs = typeof horizontalSlice !== \"undefined\" ? horizontalSlice : true,\r\n        t = sprite.texture.baseTexture,\r\n        f = sprite.texture.frame;\r\n\r\n\r\n    //get frames\r\n    if (vs && hs) {\r\n        ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\r\n        ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\r\n        fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\r\n        fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\r\n        ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\r\n        fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\r\n        fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\r\n    }\r\n    else if (hs) {\r\n        fl = new PIXI.Rectangle(f.x, f.y, bw, f.height);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\r\n    }\r\n    else { //vs\r\n        ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\r\n        fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\r\n        ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\r\n    }\r\n\r\n    //TODO: swap frames if rotation\r\n\r\n\r\n\r\n    //make sprites\r\n    sf = new PIXI.Sprite(new PIXI.Texture(t, ff));\r\n    this.container.addChild(sf);\r\n    if (vs && hs) {\r\n        stl = new PIXI.Sprite(new PIXI.Texture(t, ftl));\r\n        str = new PIXI.Sprite(new PIXI.Texture(t, ftr));\r\n        sbl = new PIXI.Sprite(new PIXI.Texture(t, fbl));\r\n        sbr = new PIXI.Sprite(new PIXI.Texture(t, fbr));\r\n        this.container.addChild(stl, str, sbl, sbr);\r\n\r\n    }\r\n    if (hs) {\r\n        this.setting.minWidth = bw * 2;\r\n        sl = new PIXI.Sprite(new PIXI.Texture(t, fl));\r\n        sr = new PIXI.Sprite(new PIXI.Texture(t, fr));\r\n        this.container.addChild(sl, sr);\r\n    }\r\n    if (vs) {\r\n        this.setting.minHeight = bw * 2;\r\n        st = new PIXI.Sprite(new PIXI.Texture(t, ft));\r\n        sb = new PIXI.Sprite(new PIXI.Texture(t, fb));\r\n        this.container.addChild(st, sb);\r\n    }\r\n\r\n    //set constant position and sizes\r\n    if (vs && hs) st.x = sb.x = sl.y = sr.y = stl.width = str.width = sbl.width = sbr.width = stl.height = str.height = sbl.height = sbr.height = bw;\r\n    if (hs) sf.x = sl.width = sr.width = bw;\r\n    if (vs) sf.y = st.height = sb.height = bw;\r\n}\r\n\r\nSliceSprite.prototype = Object.create(UIBase.prototype);\r\nSliceSprite.prototype.constructor = SliceSprite;\r\nmodule.exports = SliceSprite;\r\n\r\n/**\r\n * Updates the sliced sprites position and size\r\n *\r\n * @private\r\n */\r\nSliceSprite.prototype.update = function () {\r\n    if (vs && hs) {\r\n        str.x = sbr.x = sr.x = this.width - bw;\r\n        sbl.y = sbr.y = sb.y = this.height - bw;\r\n        sf.width = st.width = sb.width = this.width - bw * 2;\r\n        sf.height = sl.height = sr.height = this.height - bw * 2;\r\n    }\r\n    else if (hs) {\r\n        sr.x = this.width - bw;\r\n        sl.height = sr.height = sf.height = this.height;\r\n        sf.width = this.width - bw * 2;\r\n    }\r\n    else { //vs\r\n        sb.y = this.height - bw;\r\n        st.width = sb.width = sf.width = this.width;\r\n        sf.height = this.height - bw * 2;\r\n    }\r\n\r\n    if (this.tint != null) {\r\n        sf.tint = this.tint;\r\n        if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\r\n        if (hs) sl.tint = sr.tint = this.tint;\r\n        if (vs) st.tint = sb.tint = this.tint;\r\n    }\r\n};\r\n\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * A sliced sprite with dynamic width and height.\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Sprite {PIXI.Sprite} the sprite for this SliceSprite\r\n * @param BorderWidth {Number} Width of the sprite borders\r\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\r\n * @param horizontalSlice {Boolean} Slice the sprite vertically\r\n */\r\nfunction SliceSprite(sprite, borderWidth, horizontalSlice, verticalSlice) {\r\n    UIBase.call(this, sprite.width, sprite.height);\r\n\r\n    var ftl, ftr, fbl, fbr, ft, fb, fl, fr, ff, stl, str, sbl, sbr, st, sb, sl, sr, sf,\r\n        bw = borderWidth || 5,\r\n        vs = typeof verticalSlice !== \"undefined\" ? verticalSlice : true,\r\n        hs = typeof horizontalSlice !== \"undefined\" ? horizontalSlice : true,\r\n        t = sprite.texture.baseTexture,\r\n        f = sprite.texture.frame;\r\n\r\n\r\n    //get frames\r\n    if (vs && hs) {\r\n        ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\r\n        ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\r\n        fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\r\n        fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\r\n        ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\r\n        fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\r\n        fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\r\n    }\r\n    else if (hs) {\r\n        fl = new PIXI.Rectangle(f.x, f.y, bw, f.height);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\r\n    }\r\n    else { //vs\r\n        ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\r\n        fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\r\n        ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\r\n    }\r\n\r\n    //TODO: swap frames if rotation\r\n\r\n\r\n\r\n    //make sprites\r\n    sf = new PIXI.Sprite(new PIXI.Texture(t, ff));\r\n    this.container.addChild(sf);\r\n    if (vs && hs) {\r\n        stl = new PIXI.Sprite(new PIXI.Texture(t, ftl));\r\n        str = new PIXI.Sprite(new PIXI.Texture(t, ftr));\r\n        sbl = new PIXI.Sprite(new PIXI.Texture(t, fbl));\r\n        sbr = new PIXI.Sprite(new PIXI.Texture(t, fbr));\r\n        this.container.addChild(stl, str, sbl, sbr);\r\n\r\n    }\r\n    if (hs) {\r\n        this.setting.minWidth = bw * 2;\r\n        sl = new PIXI.Sprite(new PIXI.Texture(t, fl));\r\n        sr = new PIXI.Sprite(new PIXI.Texture(t, fr));\r\n        this.container.addChild(sl, sr);\r\n    }\r\n    if (vs) {\r\n        this.setting.minHeight = bw * 2;\r\n        st = new PIXI.Sprite(new PIXI.Texture(t, ft));\r\n        sb = new PIXI.Sprite(new PIXI.Texture(t, fb));\r\n        this.container.addChild(st, sb);\r\n    }\r\n\r\n    //set constant position and sizes\r\n    if (vs && hs) st.x = sb.x = sl.y = sr.y = stl.width = str.width = sbl.width = sbr.width = stl.height = str.height = sbl.height = sbr.height = bw;\r\n    if (hs) sf.x = sl.width = sr.width = bw;\r\n    if (vs) sf.y = st.height = sb.height = bw;\r\n}\r\n\r\nSliceSprite.prototype = Object.create(UIBase.prototype);\r\nSliceSprite.prototype.constructor = SliceSprite;\r\nmodule.exports = SliceSprite;\r\n\r\n/**\r\n * Updates the sliced sprites position and size\r\n *\r\n * @private\r\n */\r\nSliceSprite.prototype.update = function () {\r\n    if (vs && hs) {\r\n        str.x = sbr.x = sr.x = this.width - bw;\r\n        sbl.y = sbr.y = sb.y = this.height - bw;\r\n        sf.width = st.width = sb.width = this.width - bw * 2;\r\n        sf.height = sl.height = sr.height = this.height - bw * 2;\r\n    }\r\n    else if (hs) {\r\n        sr.x = this.width - bw;\r\n        sl.height = sr.height = sf.height = this.height;\r\n        sf.width = this.width - bw * 2;\r\n    }\r\n    else { //vs\r\n        sb.y = this.height - bw;\r\n        st.width = sb.width = sf.width = this.width;\r\n        sf.height = this.height - bw * 2;\r\n    }\r\n\r\n    if (this.tint != null) {\r\n        sf.tint = this.tint;\r\n        if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\r\n        if (hs) sl.tint = sr.tint = this.tint;\r\n        if (vs) st.tint = sb.tint = this.tint;\r\n    }\r\n};\r\n\r\n\n},{\"./UIBase\":3}],2:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI text object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Text {String} Text content\r\n * @param TextStyle {PIXI.TextStyle} Style used for the Text\r\n */\r\nfunction Text(text, PIXITextStyle) {\r\n    this.text = new PIXI.Text(text, PIXITextStyle);\r\n    UIBase.call(this, this.text.width, this.text.height);\r\n    this.container.addChild(this.text);\r\n}\r\n\r\nText.prototype = Object.create(UIBase.prototype);\r\nText.prototype.constructor = Text;\r\nmodule.exports = Text;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nText.prototype.update = function () {\r\n    if (this.tint != null)\r\n        text.tint = this.tint;\r\n};\r\n\r\n\n},{\"./UIBase\":3}],3:[function(require,module,exports){\nvar UISettings = require('./UISettings');\r\n\r\n/**\r\n * Base class of all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the UIObject\r\n * @param height {Number} Height of the UIObject\r\n */\r\nfunction UIBase(width, height) {\r\n    this.container = new PIXI.Container();\r\n    this.setting = new UISettings();\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n}\r\n\r\nUIBase.prototype.constructor = UIBase;\r\nmodule.exports = UIBase;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updatesettings = function () {\r\n    this.baseupdate();\r\n    this.update();\r\n    this.updateChildren();\r\n};\r\n\r\n/**\r\n * Update method (override from other UIObjects)\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.update = function () {\r\n};\r\n\r\n/**\r\n * Updates the UIObject with all base settings\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.baseupdate = function () {\r\n    var parentWidth = this.parent != null ? this.parent.width : window.innerWidth;\r\n    var parentHeight = this.parent != null ? this.parent.height : window.innerHeight;\r\n    this.setting.height = this.setting._height;\r\n    this.setting.width = this.setting._width;\r\n\r\n    //percentage convertions\r\n    if (this.setting.widthPct != null)\r\n        this.setting.width = parentWidth * this.setting.widthPct;\r\n    if (this.setting.heightPct != null)\r\n        this.setting.height = parentHeight * this.setting.heightPct;\r\n    if (this.setting.minWidthPct != null)\r\n        this.setting.minWidth = parentWidth * this.setting.minWidthPct;\r\n    if (this.setting.minHeightPct != null)\r\n        this.setting.minHeight = parentHeight * this.setting.minHeightPct;\r\n    if (this.setting.maxWidthPct != null)\r\n        this.setting.maxWidth = parentWidth * this.setting.maxWidthPct;\r\n    if (this.setting.maxHeightPct != null)\r\n        this.setting.maxHeight = parentHeight * this.setting.maxHeightPct;\r\n    if (this.setting.leftPct != null)\r\n        this.setting.left = parentWidth * this.setting.leftPct;\r\n    if (this.setting.rightPct != null)\r\n        this.setting.right = parentWidth * this.setting.rightPct;\r\n    if (this.setting.topPct != null)\r\n        this.setting.top = parentHeight * this.setting.topPct;\r\n    if (this.setting.bottomPct != null)\r\n        this.setting.bottom = parentHeight * this.setting.bottomPct;\r\n    if (this.setting.anchorLeftPct != null)\r\n        this.setting.anchorLeft = parentWidth * this.setting.anchorLeftPct;\r\n    if (this.setting.anchorRightPct != null)\r\n        this.setting.anchorRight = parentWidth * this.setting.anchorRightPct;\r\n    if (this.setting.anchorTopPct != null)\r\n        this.setting.anchorTop = parentHeight * this.setting.anchorTopPct;\r\n    if (this.setting.anchorBottomPct != null)\r\n        this.setting.anchorBottom = parentHeight * this.setting.anchorBottomPct;\r\n\r\n    if (this.horizontalAlign == null) {\r\n        //get anchors (use left right if conflict)\r\n        var anchorLeft = this.anchorLeft;\r\n        var anchorRight = this.anchorRight;\r\n        if (anchorLeft != null && anchorRight == null && this.right != null)\r\n            anchorRight = this.right;\r\n        else if (anchorLeft == null && anchorRight != null && this.left != null)\r\n            anchorLeft = this.left;\r\n        else if (anchorLeft == null && anchorRight == null && this.left != null && this.right != null) {\r\n            anchorLeft = this.left;\r\n            anchorRight = this.right;\r\n        }\r\n\r\n        var useHorizontalAnchor = anchorLeft != null || anchorRight != null;\r\n        var useLeftRight = !useHorizontalAnchor && (this.left != null || this.right != null);\r\n\r\n        if (useLeftRight) {\r\n            if (this.left != null)\r\n                this.container.position.x = this.left;\r\n            else if (this.right != null)\r\n                this.container.position.x = parentWidth - this.right;\r\n        }\r\n        else if (useHorizontalAnchor) {\r\n            if (anchorLeft != null && anchorRight == null)\r\n                this.container.position.x = anchorLeft;\r\n            else if (anchorLeft == null && anchorRight != null)\r\n                this.container.position.x = parentWidth - this.width - anchorRight;\r\n            else if (anchorLeft != null && anchorRight != null) {\r\n                this.container.position.x = anchorLeft;\r\n                this.setting.width = parentWidth - anchorLeft - anchorRight;\r\n            }\r\n            this.container.position.x += this.pivotX * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.x = 0;\r\n        }\r\n    }\r\n\r\n    if (this.verticalAlign == null) {\r\n        //get anchors (use top bottom if conflict)\r\n        var anchorTop = this.anchorTop;\r\n        var anchorBottom = this.anchorBottom;\r\n        if (anchorTop != null && anchorBottom == null && this.bottom != null)\r\n            anchorBottom = this.bottom;\r\n        if (anchorTop == null && anchorBottom != null && this.top != null)\r\n            anchorTop = this.top;\r\n\r\n        var useVerticalAnchor = anchorTop != null || anchorBottom != null;\r\n        var useTopBottom = !useVerticalAnchor && (this.top != null || this.bottom != null);\r\n\r\n        if (useTopBottom) {\r\n            if (this.top != null)\r\n                this.container.position.y = this.top;\r\n            else if (this.bottom != null)\r\n                this.container.position.y = parentHeight - this.bottom;\r\n        }\r\n        else if (useVerticalAnchor) {\r\n            if (anchorTop != null && anchorBottom == null)\r\n                this.container.position.y = anchorTop;\r\n            else if (anchorTop == null && anchorBottom != null)\r\n                this.container.position.y = parentHeight - this.height - anchorBottom;\r\n            else if (anchorTop != null && anchorBottom != null) {\r\n                this.container.position.y = anchorTop;\r\n                this.setting.height = parentHeight - anchorTop - anchorBottom;\r\n            }\r\n            this.container.position.y += this.pivotY * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.y = 0;\r\n        }\r\n    }\r\n\r\n    //min/max sizes\r\n    if (this.setting.maxWidth != null && this.setting.width > this.setting.maxWidth) this.setting.width = this.setting.maxWidth;\r\n    if (this.setting.width < this.setting.minWidth) this.setting.width = this.setting.minWidth;\r\n\r\n    if (this.setting.maxHeight != null && this.setting.height > this.setting.maxHeight) this.setting.height = this.setting.maxHeight;\r\n    if (this.setting.height < this.setting.minHeight) this.setting.height = this.setting.minHeight;\r\n\r\n\r\n    //pure vertical/horizontal align\r\n    if (this.horizontalAlign != null) {\r\n        if (this.horizontalAlign == \"center\")\r\n            this.container.position.x = parentWidth * 0.5 - this.width * 0.5;\r\n        else if (this.horizontalAlign == \"right\")\r\n            this.container.position.x = parentWidth - this.width;\r\n        else\r\n            this.container.position.x = 0;\r\n        this.container.position.x += this.width * this.pivotX;\r\n    }\r\n    if (this.verticalAlign != null) {\r\n        if (this.verticalAlign == \"middle\")\r\n            this.container.position.y = parentHeight * 0.5 - this.height * 0.5;\r\n        else if (this.verticalAlign == \"bottom\")\r\n            this.container.position.y = parentHeight - this.height;\r\n        else\r\n            this.container.position.y = 0;\r\n        this.container.position.y += this.height * this.pivotY;\r\n    }\r\n\r\n\r\n\r\n    //scale\r\n    if (this.setting.scaleX != null) this.container.scale.x = this.setting.scaleX;\r\n    if (this.setting.scaleY != null) this.container.scale.y = this.setting.scaleY;\r\n\r\n    //pivot\r\n    if (this.setting.pivotX != null) this.container.pivot.x = this.setting.width * this.setting.pivotX;\r\n    if (this.setting.pivotY != null) this.container.pivot.y = this.setting.height * this.setting.pivotY;\r\n\r\n    this.container.position.x = Math.round(this.container.position.x);\r\n    this.container.position.y = Math.round(this.container.position.y);\r\n};\r\n\r\n/**\r\n * Updates all UI Children\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updateChildren = function () {\r\n    for (var i = 0; i < this.children.length; i++) {\r\n        this.children[i].updatesettings();\r\n    }\r\n};\r\n\r\nUIBase.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent) {\r\n            UIObject.parent.removeChild(UIObject);\r\n        }\r\n\r\n        UIObject.parent = this;\r\n        this.container.addChild(UIObject.container);\r\n        this.children.push(UIObject);\r\n        this.updatesettings();\r\n    }\r\n\r\n    return UIObject;\r\n}\r\n\r\nUIBase.prototype.removeChild = function (UIObject) {\r\n    var i = this.children.indexOf(UIObject);\r\n    if (i != -1) {\r\n        this.container.removeChild(UIObject.container);\r\n        this.children.splice(i, 1);\r\n        UIObject.parent = null;\r\n    }\r\n}\r\n\r\nObject.defineProperties(UIBase.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this.setting.width;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.widthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.widthPct = null;\r\n                this.setting._width = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this.setting.height;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.heightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.heightPct = null;\r\n                this.setting._height = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minWidth: {\r\n        get: function () {\r\n            return this.setting.minWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinWidth = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinWidth = null;\r\n                this.setting.minWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minHeight: {\r\n        get: function () {\r\n            return this.setting.minHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinHeight = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinHeight = null;\r\n                this.setting.minHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxWidth: {\r\n        get: function () {\r\n            return this.setting.maxWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxWidthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxWidthPct = null;\r\n                this.setting.maxWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxHeight: {\r\n        get: function () {\r\n            return this.setting.maxHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxHeightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxHeightPct = null;\r\n                this.setting.maxHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorLeft: {\r\n        get: function () {\r\n            return this.setting.anchorLeft;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorLeftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorLeftPct = null;\r\n                this.setting.anchorLeft = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorRight: {\r\n        get: function () {\r\n            return this.setting.anchorRight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorRightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorRightPct = null;\r\n                this.setting.anchorRight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorTop: {\r\n        get: function () {\r\n            return this.setting.anchorTop;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorTopPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorTopPct = null;\r\n                this.setting.anchorTop = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorBottom: {\r\n        get: function () {\r\n            return this.setting.anchorBottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorBottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorBottomPct = null;\r\n                this.setting.anchorBottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    verticalAlign: {\r\n        get: function () {\r\n            return this.setting.verticalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.verticalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    horizontalAlign: {\r\n        get: function () {\r\n            return this.setting.horizontalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.horizontalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    tint: {\r\n        get: function () {\r\n            return this.setting.tint;\r\n        },\r\n        set: function (val) {\r\n            this.setting.tint = val;\r\n            this.update();\r\n        }\r\n    },\r\n    pivotX: {\r\n        get: function () {\r\n            return this.setting.pivotX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotY: {\r\n        get: function () {\r\n            return this.setting.pivotY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivot: {\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleX: {\r\n        get: function () {\r\n            return this.setting.scaleX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleY: {\r\n        get: function () {\r\n            return this.setting.scaleY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scale: {\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    left: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.leftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.leftPct = null;\r\n                this.setting.left = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    right: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.rightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.rightPct = null;\r\n                this.setting.right = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    top: {\r\n        get: function () {\r\n            return this.setting.top;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.topPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.topPct = null;\r\n                this.setting.top = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    bottom: {\r\n        get: function () {\r\n            return this.setting.bottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.bottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.bottomPct = null;\r\n                this.setting.bottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    x: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            this.left = val;\r\n        }\r\n    },\r\n    y: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            this.top = val;\r\n        }\r\n    },\r\n});\r\n\n},{\"./UISettings\":5}],4:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction UIContainer(width, height) {\r\n    UIBase.call(this, width, height);\r\n}\r\n\r\nconsole.log(UIBase);\r\n\r\nUIContainer.prototype = Object.create(UIBase.prototype);\r\nUIContainer.prototype.constructor = UIContainer;\r\nmodule.exports = UIContainer;\r\n\r\n\n},{\"./UIBase\":3}],5:[function(require,module,exports){\n/**\r\n * Settings object for all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n */\r\nfunction UISettings() {\r\n    this._width = 0;\r\n    this.width = 0;\r\n    this.widthPct = null;\r\n    this._height = 0;\r\n    this.height = 0;\r\n    this.heightPct = null;\r\n    this.minWidth = 0;\r\n    this.minWidthPct = null;\r\n    this.minHeight = 0;\r\n    this.minHeightPct = null;\r\n    this.maxWidth = null;\r\n    this.maxWidthPct = null;\r\n    this.maxHeight = null;\r\n    this.maxHeightPct = null;\r\n    this.left = null;\r\n    this.leftPct = null;\r\n    this.right = null;\r\n    this.rightPct = null;\r\n    this.top = null;\r\n    this.topPct = null;\r\n    this.bottom = null;\r\n    this.bottomPct = null;\r\n    this.anchorLeft = null;\r\n    this.anchorLeftPct = null;\r\n    this.anchorRight = null;\r\n    this.anchorRightPct = null;\r\n    this.anchorTop = null;\r\n    this.anchorTopPct = null;\r\n    this.anchorBottom = null;\r\n    this.anchorBottomPct = null;\r\n    this.pivotX = null;\r\n    this.pivotY = null;\r\n    this.scaleX = null;\r\n    this.scaleY = null;\r\n    this.verticalAlign = null;\r\n    this.horizontalAlign = null;\r\n    this.tint = null;\r\n}\r\n\r\n\r\nmodule.exports = UISettings;\r\n\r\n\r\n\n},{}],6:[function(require,module,exports){\nvar UI = {\r\n    UISettings: require('./UISettings'),\r\n    UIBase: require('./UIBase'),\r\n    UIContainer: require('./UIContainer'),\r\n    SliceSprite: require('./SliceSprite'),\r\n    Text: require('./Text')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.UI, UI);\r\n\r\nmodule.exports = UI;\r\n\n},{\"./SliceSprite\":1,\"./Text\":2,\"./UIBase\":3,\"./UIContainer\":4,\"./UISettings\":5}]},{},[6])\n\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI text object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Text {String} Text content\r\n * @param TextStyle {PIXI.TextStyle} Style used for the Text\r\n */\r\nfunction Text(text, PIXITextStyle) {\r\n    this.text = new PIXI.Text(text, PIXITextStyle);\r\n    UIBase.call(this, this.text.width, this.text.height);\r\n    this.container.addChild(this.text);\r\n}\r\n\r\nText.prototype = Object.create(UIBase.prototype);\r\nText.prototype.constructor = Text;\r\nmodule.exports = Text;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nText.prototype.update = function () {\r\n    if (this.tint != null)\r\n        text.tint = this.tint;\r\n};\r\n\r\n","var UISettings = require('./UISettings');\r\n\r\n/**\r\n * Base class of all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the UIObject\r\n * @param height {Number} Height of the UIObject\r\n */\r\nfunction UIBase(width, height) {\r\n    this.container = new PIXI.Container();\r\n    this.setting = new UISettings();\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n}\r\n\r\nUIBase.prototype.constructor = UIBase;\r\nmodule.exports = UIBase;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updatesettings = function () {\r\n    this.baseupdate();\r\n    this.update();\r\n    this.updateChildren();\r\n};\r\n\r\n/**\r\n * Update method (override from other UIObjects)\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.update = function () {\r\n};\r\n\r\n/**\r\n * Updates the UIObject with all base settings\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.baseupdate = function () {\r\n    var parentWidth = this.parent != null ? this.parent.width : window.innerWidth;\r\n    var parentHeight = this.parent != null ? this.parent.height : window.innerHeight;\r\n    this.setting.height = this.setting._height;\r\n    this.setting.width = this.setting._width;\r\n\r\n    //percentage convertions\r\n    if (this.setting.widthPct != null)\r\n        this.setting.width = parentWidth * this.setting.widthPct;\r\n    if (this.setting.heightPct != null)\r\n        this.setting.height = parentHeight * this.setting.heightPct;\r\n    if (this.setting.minWidthPct != null)\r\n        this.setting.minWidth = parentWidth * this.setting.minWidthPct;\r\n    if (this.setting.minHeightPct != null)\r\n        this.setting.minHeight = parentHeight * this.setting.minHeightPct;\r\n    if (this.setting.maxWidthPct != null)\r\n        this.setting.maxWidth = parentWidth * this.setting.maxWidthPct;\r\n    if (this.setting.maxHeightPct != null)\r\n        this.setting.maxHeight = parentHeight * this.setting.maxHeightPct;\r\n    if (this.setting.leftPct != null)\r\n        this.setting.left = parentWidth * this.setting.leftPct;\r\n    if (this.setting.rightPct != null)\r\n        this.setting.right = parentWidth * this.setting.rightPct;\r\n    if (this.setting.topPct != null)\r\n        this.setting.top = parentHeight * this.setting.topPct;\r\n    if (this.setting.bottomPct != null)\r\n        this.setting.bottom = parentHeight * this.setting.bottomPct;\r\n    if (this.setting.anchorLeftPct != null)\r\n        this.setting.anchorLeft = parentWidth * this.setting.anchorLeftPct;\r\n    if (this.setting.anchorRightPct != null)\r\n        this.setting.anchorRight = parentWidth * this.setting.anchorRightPct;\r\n    if (this.setting.anchorTopPct != null)\r\n        this.setting.anchorTop = parentHeight * this.setting.anchorTopPct;\r\n    if (this.setting.anchorBottomPct != null)\r\n        this.setting.anchorBottom = parentHeight * this.setting.anchorBottomPct;\r\n\r\n    if (this.horizontalAlign == null) {\r\n        //get anchors (use left right if conflict)\r\n        var anchorLeft = this.anchorLeft;\r\n        var anchorRight = this.anchorRight;\r\n        if (anchorLeft != null && anchorRight == null && this.right != null)\r\n            anchorRight = this.right;\r\n        else if (anchorLeft == null && anchorRight != null && this.left != null)\r\n            anchorLeft = this.left;\r\n        else if (anchorLeft == null && anchorRight == null && this.left != null && this.right != null) {\r\n            anchorLeft = this.left;\r\n            anchorRight = this.right;\r\n        }\r\n\r\n        var useHorizontalAnchor = anchorLeft != null || anchorRight != null;\r\n        var useLeftRight = !useHorizontalAnchor && (this.left != null || this.right != null);\r\n\r\n        if (useLeftRight) {\r\n            if (this.left != null)\r\n                this.container.position.x = this.left;\r\n            else if (this.right != null)\r\n                this.container.position.x = parentWidth - this.right;\r\n        }\r\n        else if (useHorizontalAnchor) {\r\n            if (anchorLeft != null && anchorRight == null)\r\n                this.container.position.x = anchorLeft;\r\n            else if (anchorLeft == null && anchorRight != null)\r\n                this.container.position.x = parentWidth - this.width - anchorRight;\r\n            else if (anchorLeft != null && anchorRight != null) {\r\n                this.container.position.x = anchorLeft;\r\n                this.setting.width = parentWidth - anchorLeft - anchorRight;\r\n            }\r\n            this.container.position.x += this.pivotX * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.x = 0;\r\n        }\r\n    }\r\n\r\n    if (this.verticalAlign == null) {\r\n        //get anchors (use top bottom if conflict)\r\n        var anchorTop = this.anchorTop;\r\n        var anchorBottom = this.anchorBottom;\r\n        if (anchorTop != null && anchorBottom == null && this.bottom != null)\r\n            anchorBottom = this.bottom;\r\n        if (anchorTop == null && anchorBottom != null && this.top != null)\r\n            anchorTop = this.top;\r\n\r\n        var useVerticalAnchor = anchorTop != null || anchorBottom != null;\r\n        var useTopBottom = !useVerticalAnchor && (this.top != null || this.bottom != null);\r\n\r\n        if (useTopBottom) {\r\n            if (this.top != null)\r\n                this.container.position.y = this.top;\r\n            else if (this.bottom != null)\r\n                this.container.position.y = parentHeight - this.bottom;\r\n        }\r\n        else if (useVerticalAnchor) {\r\n            if (anchorTop != null && anchorBottom == null)\r\n                this.container.position.y = anchorTop;\r\n            else if (anchorTop == null && anchorBottom != null)\r\n                this.container.position.y = parentHeight - this.height - anchorBottom;\r\n            else if (anchorTop != null && anchorBottom != null) {\r\n                this.container.position.y = anchorTop;\r\n                this.setting.height = parentHeight - anchorTop - anchorBottom;\r\n            }\r\n            this.container.position.y += this.pivotY * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.y = 0;\r\n        }\r\n    }\r\n\r\n    //min/max sizes\r\n    if (this.setting.maxWidth != null && this.setting.width > this.setting.maxWidth) this.setting.width = this.setting.maxWidth;\r\n    if (this.setting.width < this.setting.minWidth) this.setting.width = this.setting.minWidth;\r\n\r\n    if (this.setting.maxHeight != null && this.setting.height > this.setting.maxHeight) this.setting.height = this.setting.maxHeight;\r\n    if (this.setting.height < this.setting.minHeight) this.setting.height = this.setting.minHeight;\r\n\r\n\r\n    //pure vertical/horizontal align\r\n    if (this.horizontalAlign != null) {\r\n        if (this.horizontalAlign == \"center\")\r\n            this.container.position.x = parentWidth * 0.5 - this.width * 0.5;\r\n        else if (this.horizontalAlign == \"right\")\r\n            this.container.position.x = parentWidth - this.width;\r\n        else\r\n            this.container.position.x = 0;\r\n        this.container.position.x += this.width * this.pivotX;\r\n    }\r\n    if (this.verticalAlign != null) {\r\n        if (this.verticalAlign == \"middle\")\r\n            this.container.position.y = parentHeight * 0.5 - this.height * 0.5;\r\n        else if (this.verticalAlign == \"bottom\")\r\n            this.container.position.y = parentHeight - this.height;\r\n        else\r\n            this.container.position.y = 0;\r\n        this.container.position.y += this.height * this.pivotY;\r\n    }\r\n\r\n\r\n\r\n    //scale\r\n    if (this.setting.scaleX != null) this.container.scale.x = this.setting.scaleX;\r\n    if (this.setting.scaleY != null) this.container.scale.y = this.setting.scaleY;\r\n\r\n    //pivot\r\n    if (this.setting.pivotX != null) this.container.pivot.x = this.setting.width * this.setting.pivotX;\r\n    if (this.setting.pivotY != null) this.container.pivot.y = this.setting.height * this.setting.pivotY;\r\n\r\n    this.container.position.x = Math.round(this.container.position.x);\r\n    this.container.position.y = Math.round(this.container.position.y);\r\n};\r\n\r\n/**\r\n * Updates all UI Children\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updateChildren = function () {\r\n    for (var i = 0; i < this.children.length; i++) {\r\n        this.children[i].updatesettings();\r\n    }\r\n};\r\n\r\nUIBase.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent) {\r\n            UIObject.parent.removeChild(UIObject);\r\n        }\r\n\r\n        UIObject.parent = this;\r\n        this.container.addChild(UIObject.container);\r\n        this.children.push(UIObject);\r\n        this.updatesettings();\r\n    }\r\n\r\n    return UIObject;\r\n}\r\n\r\nUIBase.prototype.removeChild = function (UIObject) {\r\n    var i = this.children.indexOf(UIObject);\r\n    if (i != -1) {\r\n        this.container.removeChild(UIObject.container);\r\n        this.children.splice(i, 1);\r\n        UIObject.parent = null;\r\n    }\r\n}\r\n\r\nObject.defineProperties(UIBase.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this.setting.width;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.widthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.widthPct = null;\r\n                this.setting._width = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this.setting.height;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.heightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.heightPct = null;\r\n                this.setting._height = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minWidth: {\r\n        get: function () {\r\n            return this.setting.minWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinWidth = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinWidth = null;\r\n                this.setting.minWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minHeight: {\r\n        get: function () {\r\n            return this.setting.minHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinHeight = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinHeight = null;\r\n                this.setting.minHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxWidth: {\r\n        get: function () {\r\n            return this.setting.maxWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxWidthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxWidthPct = null;\r\n                this.setting.maxWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxHeight: {\r\n        get: function () {\r\n            return this.setting.maxHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxHeightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxHeightPct = null;\r\n                this.setting.maxHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorLeft: {\r\n        get: function () {\r\n            return this.setting.anchorLeft;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorLeftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorLeftPct = null;\r\n                this.setting.anchorLeft = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorRight: {\r\n        get: function () {\r\n            return this.setting.anchorRight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorRightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorRightPct = null;\r\n                this.setting.anchorRight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorTop: {\r\n        get: function () {\r\n            return this.setting.anchorTop;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorTopPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorTopPct = null;\r\n                this.setting.anchorTop = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorBottom: {\r\n        get: function () {\r\n            return this.setting.anchorBottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorBottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorBottomPct = null;\r\n                this.setting.anchorBottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    verticalAlign: {\r\n        get: function () {\r\n            return this.setting.verticalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.verticalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    horizontalAlign: {\r\n        get: function () {\r\n            return this.setting.horizontalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.horizontalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    tint: {\r\n        get: function () {\r\n            return this.setting.tint;\r\n        },\r\n        set: function (val) {\r\n            this.setting.tint = val;\r\n            this.update();\r\n        }\r\n    },\r\n    pivotX: {\r\n        get: function () {\r\n            return this.setting.pivotX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotY: {\r\n        get: function () {\r\n            return this.setting.pivotY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivot: {\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleX: {\r\n        get: function () {\r\n            return this.setting.scaleX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleY: {\r\n        get: function () {\r\n            return this.setting.scaleY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scale: {\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    left: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.leftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.leftPct = null;\r\n                this.setting.left = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    right: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.rightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.rightPct = null;\r\n                this.setting.right = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    top: {\r\n        get: function () {\r\n            return this.setting.top;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.topPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.topPct = null;\r\n                this.setting.top = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    bottom: {\r\n        get: function () {\r\n            return this.setting.bottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.bottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.bottomPct = null;\r\n                this.setting.bottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    x: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            this.left = val;\r\n        }\r\n    },\r\n    y: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            this.top = val;\r\n        }\r\n    },\r\n});\r\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction UIContainer(width, height) {\r\n    UIBase.call(this, width, height);\r\n}\r\n\r\nconsole.log(UIBase);\r\n\r\nUIContainer.prototype = Object.create(UIBase.prototype);\r\nUIContainer.prototype.constructor = UIContainer;\r\nmodule.exports = UIContainer;\r\n\r\n","/**\r\n * Settings object for all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n */\r\nfunction UISettings() {\r\n    this._width = 0;\r\n    this.width = 0;\r\n    this.widthPct = null;\r\n    this._height = 0;\r\n    this.height = 0;\r\n    this.heightPct = null;\r\n    this.minWidth = 0;\r\n    this.minWidthPct = null;\r\n    this.minHeight = 0;\r\n    this.minHeightPct = null;\r\n    this.maxWidth = null;\r\n    this.maxWidthPct = null;\r\n    this.maxHeight = null;\r\n    this.maxHeightPct = null;\r\n    this.left = null;\r\n    this.leftPct = null;\r\n    this.right = null;\r\n    this.rightPct = null;\r\n    this.top = null;\r\n    this.topPct = null;\r\n    this.bottom = null;\r\n    this.bottomPct = null;\r\n    this.anchorLeft = null;\r\n    this.anchorLeftPct = null;\r\n    this.anchorRight = null;\r\n    this.anchorRightPct = null;\r\n    this.anchorTop = null;\r\n    this.anchorTopPct = null;\r\n    this.anchorBottom = null;\r\n    this.anchorBottomPct = null;\r\n    this.pivotX = null;\r\n    this.pivotY = null;\r\n    this.scaleX = null;\r\n    this.scaleY = null;\r\n    this.verticalAlign = null;\r\n    this.horizontalAlign = null;\r\n    this.tint = null;\r\n}\r\n\r\n\r\nmodule.exports = UISettings;\r\n\r\n\r\n","var UI = {\r\n    UISettings: require('./UISettings'),\r\n    UIBase: require('./UIBase'),\r\n    UIContainer: require('./UIContainer'),\r\n    SliceSprite: require('./SliceSprite'),\r\n    Text: require('./Text')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.UI, UI);\r\n\r\nmodule.exports = UI;\r\n"],"sourceRoot":"./"}
{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Container.js","pixi-ui.min.js","src/SliceSprite.js","src/Text.js","src/UIBase.js","src/UISettings.js","src/index"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Container","width","height","UIBase","this","prototype","Object","create","constructor","./UIBase","2","SliceSprite","sprite","borderWidth","horizontalSlice","verticalSlice","ftl","ftr","fbl","fbr","ft","fb","fl","fr","ff","stl","str","sbl","sbr","st","sb","sl","sr","sf","bw","vs","hs","texture","baseTexture","frame","PIXI","Rectangle","x","y","Sprite","Texture","container","addChild","setting","minWidth","minHeight","update","tint","3","Text","text","PIXITextStyle","4","UISettings","children","parent","updatesettings","baseUpdate","updateChildren","parentWidth","window","innerWidth","parentHeight","innerHeight","_height","_width","widthPct","heightPct","minWidthPct","minHeightPct","maxWidthPct","maxWidth","maxHeightPct","maxHeight","leftPct","left","rightPct","right","topPct","top","bottomPct","bottom","anchorLeftPct","anchorLeft","anchorRightPct","anchorRight","anchorTopPct","anchorTop","anchorBottomPct","anchorBottom","horizontalAlign","useHorizontalAnchor","useLeftRight","position","pivotX","verticalAlign","useVerticalAnchor","useTopBottom","pivotY","scaleX","scale","scaleY","pivot","Math","round","UIObject","argumentsLength","arguments","removeChild","push","indexOf","splice","defineProperties","get","set","val","isNaN","replace","parseFloat","percentageMinWidth","percentageMinHeight","./UISettings","5","6","UI","assign","./Container","./SliceSprite","./Text"],"mappings":"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","file":"pixi-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction Container(width, height) {\r\n    UIBase.call(this, width, height);\r\n}\r\n\r\nContainer.prototype = Object.create(UIBase.prototype);\r\nContainer.prototype.constructor = Container;\r\nmodule.exports = Container;\r\n\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction Container(width, height) {\r\n    UIBase.call(this, width, height);\r\n}\r\n\r\nContainer.prototype = Object.create(UIBase.prototype);\r\nContainer.prototype.constructor = Container;\r\nmodule.exports = Container;\r\n\r\n\n},{\"./UIBase\":4}],2:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * A sliced sprite with dynamic width and height.\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Sprite {PIXI.Sprite} the sprite for this SliceSprite\r\n * @param BorderWidth {Number} Width of the sprite borders\r\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\r\n * @param horizontalSlice {Boolean} Slice the sprite vertically\r\n */\r\nfunction SliceSprite(sprite, borderWidth, horizontalSlice, verticalSlice) {\r\n    UIBase.call(this, sprite.width, sprite.height);\r\n\r\n    var ftl, ftr, fbl, fbr, ft, fb, fl, fr, ff, stl, str, sbl, sbr, st, sb, sl, sr, sf,\r\n        bw = borderWidth || 5,\r\n        vs = typeof verticalSlice !== \"undefined\" ? verticalSlice : true,\r\n        hs = typeof horizontalSlice !== \"undefined\" ? horizontalSlice : true,\r\n        t = sprite.texture.baseTexture,\r\n        f = sprite.texture.frame;\r\n\r\n\r\n    //get frames\r\n    if (vs && hs) {\r\n        ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\r\n        ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\r\n        fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\r\n        fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\r\n        ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\r\n        fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\r\n        fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\r\n    }\r\n    else if (hs) {\r\n        fl = new PIXI.Rectangle(f.x, f.y, bw, f.height);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\r\n    }\r\n    else { //vs\r\n        ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\r\n        fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\r\n        ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\r\n    }\r\n\r\n    //TODO: swap frames if rotation\r\n\r\n\r\n\r\n    //make sprites\r\n    sf = new PIXI.Sprite(new PIXI.Texture(t, ff));\r\n    this.container.addChild(sf);\r\n    if (vs && hs) {\r\n        stl = new PIXI.Sprite(new PIXI.Texture(t, ftl));\r\n        str = new PIXI.Sprite(new PIXI.Texture(t, ftr));\r\n        sbl = new PIXI.Sprite(new PIXI.Texture(t, fbl));\r\n        sbr = new PIXI.Sprite(new PIXI.Texture(t, fbr));\r\n        this.container.addChild(stl, str, sbl, sbr);\r\n\r\n    }\r\n    if (hs) {\r\n        this.setting.minWidth = bw * 2;\r\n        sl = new PIXI.Sprite(new PIXI.Texture(t, fl));\r\n        sr = new PIXI.Sprite(new PIXI.Texture(t, fr));\r\n        this.container.addChild(sl, sr);\r\n    }\r\n    if (vs) {\r\n        this.setting.minHeight = bw * 2;\r\n        st = new PIXI.Sprite(new PIXI.Texture(t, ft));\r\n        sb = new PIXI.Sprite(new PIXI.Texture(t, fb));\r\n        this.container.addChild(st, sb);\r\n    }\r\n\r\n    //set constant position and sizes\r\n    if (vs && hs) st.x = sb.x = sl.y = sr.y = stl.width = str.width = sbl.width = sbr.width = stl.height = str.height = sbl.height = sbr.height = bw;\r\n    if (hs) sf.x = sl.width = sr.width = bw;\r\n    if (vs) sf.y = st.height = sb.height = bw;\r\n}\r\n\r\nSliceSprite.prototype = Object.create(UIBase.prototype);\r\nSliceSprite.prototype.constructor = SliceSprite;\r\nmodule.exports = SliceSprite;\r\n\r\n/**\r\n * Updates the sliced sprites position and size\r\n *\r\n * @private\r\n */\r\nSliceSprite.prototype.update = function () {\r\n    if (vs && hs) {\r\n        str.x = sbr.x = sr.x = this.width - bw;\r\n        sbl.y = sbr.y = sb.y = this.height - bw;\r\n        sf.width = st.width = sb.width = this.width - bw * 2;\r\n        sf.height = sl.height = sr.height = this.height - bw * 2;\r\n    }\r\n    else if (hs) {\r\n        sr.x = this.width - bw;\r\n        sl.height = sr.height = sf.height = this.height;\r\n        sf.width = this.width - bw * 2;\r\n    }\r\n    else { //vs\r\n        sb.y = this.height - bw;\r\n        st.width = sb.width = sf.width = this.width;\r\n        sf.height = this.height - bw * 2;\r\n    }\r\n\r\n    if (this.tint != null) {\r\n        sf.tint = this.tint;\r\n        if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\r\n        if (hs) sl.tint = sr.tint = this.tint;\r\n        if (vs) st.tint = sb.tint = this.tint;\r\n    }\r\n};\r\n\r\n\n},{\"./UIBase\":4}],3:[function(require,module,exports){\nvar UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI text object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Text {String} Text content\r\n * @param TextStyle {PIXI.TextStyle} Style used for the Text\r\n */\r\nfunction Text(text, PIXITextStyle) {\r\n    this.text = new PIXI.Text(text, PIXITextStyle);\r\n    UIBase.call(this, this.text.width, this.text.height);\r\n    this.container.addChild(this.text);\r\n}\r\n\r\nText.prototype = Object.create(UIBase.prototype);\r\nText.prototype.constructor = Text;\r\nmodule.exports = Text;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nText.prototype.update = function () {\r\n    if (this.tint != null)\r\n        text.tint = this.tint;\r\n};\r\n\r\n\n},{\"./UIBase\":4}],4:[function(require,module,exports){\nvar UISettings = require('./UISettings');\r\n\r\n/**\r\n * Base class of all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the UIObject\r\n * @param height {Number} Height of the UIObject\r\n */\r\nfunction UIBase(width, height) {\r\n    this.container = new PIXI.Container();\r\n    this.setting = new UISettings();\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n}\r\n\r\nUIBase.prototype.constructor = UIBase;\r\nmodule.exports = UIBase;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updatesettings = function () {\r\n    this.baseUpdate();\r\n    this.update();\r\n    this.updateChildren();\r\n};\r\n\r\n/**\r\n * Update method (override from other UIObjects)\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.update = function () {\r\n};\r\n\r\n/**\r\n * Updates the UIObject with all base settings\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.baseUpdate = function () {\r\n    var parentWidth = this.parent != null ? this.parent.width : window.innerWidth;\r\n    var parentHeight = this.parent != null ? this.parent.height : window.innerHeight;\r\n    this.setting.height = this.setting._height;\r\n    this.setting.width = this.setting._width;\r\n\r\n    //percentage convertions\r\n    if (this.setting.widthPct != null)\r\n        this.setting.width = parentWidth * this.setting.widthPct;\r\n    if (this.setting.heightPct != null)\r\n        this.setting.height = parentHeight * this.setting.heightPct;\r\n    if (this.setting.minWidthPct != null)\r\n        this.setting.minWidth = parentWidth * this.setting.minWidthPct;\r\n    if (this.setting.minHeightPct != null)\r\n        this.setting.minHeight = parentHeight * this.setting.minHeightPct;\r\n    if (this.setting.maxWidthPct != null)\r\n        this.setting.maxWidth = parentWidth * this.setting.maxWidthPct;\r\n    if (this.setting.maxHeightPct != null)\r\n        this.setting.maxHeight = parentHeight * this.setting.maxHeightPct;\r\n    if (this.setting.leftPct != null)\r\n        this.setting.left = parentWidth * this.setting.leftPct;\r\n    if (this.setting.rightPct != null)\r\n        this.setting.right = parentWidth * this.setting.rightPct;\r\n    if (this.setting.topPct != null)\r\n        this.setting.top = parentHeight * this.setting.topPct;\r\n    if (this.setting.bottomPct != null)\r\n        this.setting.bottom = parentHeight * this.setting.bottomPct;\r\n    if (this.setting.anchorLeftPct != null)\r\n        this.setting.anchorLeft = parentWidth * this.setting.anchorLeftPct;\r\n    if (this.setting.anchorRightPct != null)\r\n        this.setting.anchorRight = parentWidth * this.setting.anchorRightPct;\r\n    if (this.setting.anchorTopPct != null)\r\n        this.setting.anchorTop = parentHeight * this.setting.anchorTopPct;\r\n    if (this.setting.anchorBottomPct != null)\r\n        this.setting.anchorBottom = parentHeight * this.setting.anchorBottomPct;\r\n\r\n    if (this.horizontalAlign == null) {\r\n        //get anchors (use left right if conflict)\r\n        var anchorLeft = this.anchorLeft;\r\n        var anchorRight = this.anchorRight;\r\n        if (anchorLeft != null && anchorRight == null && this.right != null)\r\n            anchorRight = this.right;\r\n        else if (anchorLeft == null && anchorRight != null && this.left != null)\r\n            anchorLeft = this.left;\r\n        else if (anchorLeft == null && anchorRight == null && this.left != null && this.right != null) {\r\n            anchorLeft = this.left;\r\n            anchorRight = this.right;\r\n        }\r\n\r\n        var useHorizontalAnchor = anchorLeft != null || anchorRight != null;\r\n        var useLeftRight = !useHorizontalAnchor && (this.left != null || this.right != null);\r\n\r\n        if (useLeftRight) {\r\n            if (this.left != null)\r\n                this.container.position.x = this.left;\r\n            else if (this.right != null)\r\n                this.container.position.x = parentWidth - this.right;\r\n        }\r\n        else if (useHorizontalAnchor) {\r\n            if (anchorLeft != null && anchorRight == null)\r\n                this.container.position.x = anchorLeft;\r\n            else if (anchorLeft == null && anchorRight != null)\r\n                this.container.position.x = parentWidth - this.width - anchorRight;\r\n            else if (anchorLeft != null && anchorRight != null) {\r\n                this.container.position.x = anchorLeft;\r\n                this.setting.width = parentWidth - anchorLeft - anchorRight;\r\n            }\r\n            this.container.position.x += this.pivotX * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.x = 0;\r\n        }\r\n    }\r\n\r\n    if (this.verticalAlign == null) {\r\n        //get anchors (use top bottom if conflict)\r\n        var anchorTop = this.anchorTop;\r\n        var anchorBottom = this.anchorBottom;\r\n        if (anchorTop != null && anchorBottom == null && this.bottom != null)\r\n            anchorBottom = this.bottom;\r\n        if (anchorTop == null && anchorBottom != null && this.top != null)\r\n            anchorTop = this.top;\r\n\r\n        var useVerticalAnchor = anchorTop != null || anchorBottom != null;\r\n        var useTopBottom = !useVerticalAnchor && (this.top != null || this.bottom != null);\r\n\r\n        if (useTopBottom) {\r\n            if (this.top != null)\r\n                this.container.position.y = this.top;\r\n            else if (this.bottom != null)\r\n                this.container.position.y = parentHeight - this.bottom;\r\n        }\r\n        else if (useVerticalAnchor) {\r\n            if (anchorTop != null && anchorBottom == null)\r\n                this.container.position.y = anchorTop;\r\n            else if (anchorTop == null && anchorBottom != null)\r\n                this.container.position.y = parentHeight - this.height - anchorBottom;\r\n            else if (anchorTop != null && anchorBottom != null) {\r\n                this.container.position.y = anchorTop;\r\n                this.setting.height = parentHeight - anchorTop - anchorBottom;\r\n            }\r\n            this.container.position.y += this.pivotY * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.y = 0;\r\n        }\r\n    }\r\n\r\n    //min/max sizes\r\n    if (this.setting.maxWidth != null && this.setting.width > this.setting.maxWidth) this.setting.width = this.setting.maxWidth;\r\n    if (this.setting.width < this.setting.minWidth) this.setting.width = this.setting.minWidth;\r\n\r\n    if (this.setting.maxHeight != null && this.setting.height > this.setting.maxHeight) this.setting.height = this.setting.maxHeight;\r\n    if (this.setting.height < this.setting.minHeight) this.setting.height = this.setting.minHeight;\r\n\r\n\r\n    //pure vertical/horizontal align\r\n    if (this.horizontalAlign != null) {\r\n        if (this.horizontalAlign == \"center\")\r\n            this.container.position.x = parentWidth * 0.5 - this.width * 0.5;\r\n        else if (this.horizontalAlign == \"right\")\r\n            this.container.position.x = parentWidth - this.width;\r\n        else\r\n            this.container.position.x = 0;\r\n        this.container.position.x += this.width * this.pivotX;\r\n    }\r\n    if (this.verticalAlign != null) {\r\n        if (this.verticalAlign == \"middle\")\r\n            this.container.position.y = parentHeight * 0.5 - this.height * 0.5;\r\n        else if (this.verticalAlign == \"bottom\")\r\n            this.container.position.y = parentHeight - this.height;\r\n        else\r\n            this.container.position.y = 0;\r\n        this.container.position.y += this.height * this.pivotY;\r\n    }\r\n\r\n\r\n\r\n    //scale\r\n    if (this.setting.scaleX != null) this.container.scale.x = this.setting.scaleX;\r\n    if (this.setting.scaleY != null) this.container.scale.y = this.setting.scaleY;\r\n\r\n    //pivot\r\n    if (this.setting.pivotX != null) this.container.pivot.x = this.setting.width * this.setting.pivotX;\r\n    if (this.setting.pivotY != null) this.container.pivot.y = this.setting.height * this.setting.pivotY;\r\n\r\n    this.container.position.x = Math.round(this.container.position.x);\r\n    this.container.position.y = Math.round(this.container.position.y);\r\n};\r\n\r\n/**\r\n * Updates all UI Children\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updateChildren = function () {\r\n    for (var i = 0; i < this.children.length; i++) {\r\n        this.children[i].updatesettings();\r\n    }\r\n};\r\n\r\nUIBase.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent) {\r\n            UIObject.parent.removeChild(UIObject);\r\n        }\r\n\r\n        UIObject.parent = this;\r\n        this.container.addChild(UIObject.container);\r\n        this.children.push(UIObject);\r\n        this.updatesettings();\r\n    }\r\n\r\n    return UIObject;\r\n}\r\n\r\nUIBase.prototype.removeChild = function (UIObject) {\r\n    var i = this.children.indexOf(UIObject);\r\n    if (i != -1) {\r\n        this.container.removeChild(UIObject.container);\r\n        this.children.splice(i, 1);\r\n        UIObject.parent = null;\r\n    }\r\n}\r\n\r\nObject.defineProperties(UIBase.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this.setting.width;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.widthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.widthPct = null;\r\n                this.setting._width = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this.setting.height;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.heightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.heightPct = null;\r\n                this.setting._height = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minWidth: {\r\n        get: function () {\r\n            return this.setting.minWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinWidth = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinWidth = null;\r\n                this.setting.minWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minHeight: {\r\n        get: function () {\r\n            return this.setting.minHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinHeight = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinHeight = null;\r\n                this.setting.minHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxWidth: {\r\n        get: function () {\r\n            return this.setting.maxWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxWidthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxWidthPct = null;\r\n                this.setting.maxWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxHeight: {\r\n        get: function () {\r\n            return this.setting.maxHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxHeightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxHeightPct = null;\r\n                this.setting.maxHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorLeft: {\r\n        get: function () {\r\n            return this.setting.anchorLeft;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorLeftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorLeftPct = null;\r\n                this.setting.anchorLeft = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorRight: {\r\n        get: function () {\r\n            return this.setting.anchorRight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorRightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorRightPct = null;\r\n                this.setting.anchorRight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorTop: {\r\n        get: function () {\r\n            return this.setting.anchorTop;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorTopPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorTopPct = null;\r\n                this.setting.anchorTop = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorBottom: {\r\n        get: function () {\r\n            return this.setting.anchorBottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorBottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorBottomPct = null;\r\n                this.setting.anchorBottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    verticalAlign: {\r\n        get: function () {\r\n            return this.setting.verticalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.verticalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    horizontalAlign: {\r\n        get: function () {\r\n            return this.setting.horizontalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.horizontalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    tint: {\r\n        get: function () {\r\n            return this.setting.tint;\r\n        },\r\n        set: function (val) {\r\n            this.setting.tint = val;\r\n            this.update();\r\n        }\r\n    },\r\n    pivotX: {\r\n        get: function () {\r\n            return this.setting.pivotX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotY: {\r\n        get: function () {\r\n            return this.setting.pivotY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivot: {\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleX: {\r\n        get: function () {\r\n            return this.setting.scaleX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleY: {\r\n        get: function () {\r\n            return this.setting.scaleY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scale: {\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    left: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.leftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.leftPct = null;\r\n                this.setting.left = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    right: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.rightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.rightPct = null;\r\n                this.setting.right = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    top: {\r\n        get: function () {\r\n            return this.setting.top;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.topPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.topPct = null;\r\n                this.setting.top = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    bottom: {\r\n        get: function () {\r\n            return this.setting.bottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.bottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.bottomPct = null;\r\n                this.setting.bottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    x: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            this.left = val;\r\n        }\r\n    },\r\n    y: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            this.top = val;\r\n        }\r\n    },\r\n});\r\n\n},{\"./UISettings\":5}],5:[function(require,module,exports){\n/**\r\n * Settings object for all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n */\r\nfunction UISettings() {\r\n    this._width = 0;\r\n    this.width = 0;\r\n    this.widthPct = null;\r\n    this._height = 0;\r\n    this.height = 0;\r\n    this.heightPct = null;\r\n    this.minWidth = 0;\r\n    this.minWidthPct = null;\r\n    this.minHeight = 0;\r\n    this.minHeightPct = null;\r\n    this.maxWidth = null;\r\n    this.maxWidthPct = null;\r\n    this.maxHeight = null;\r\n    this.maxHeightPct = null;\r\n    this.left = null;\r\n    this.leftPct = null;\r\n    this.right = null;\r\n    this.rightPct = null;\r\n    this.top = null;\r\n    this.topPct = null;\r\n    this.bottom = null;\r\n    this.bottomPct = null;\r\n    this.anchorLeft = null;\r\n    this.anchorLeftPct = null;\r\n    this.anchorRight = null;\r\n    this.anchorRightPct = null;\r\n    this.anchorTop = null;\r\n    this.anchorTopPct = null;\r\n    this.anchorBottom = null;\r\n    this.anchorBottomPct = null;\r\n    this.pivotX = null;\r\n    this.pivotY = null;\r\n    this.scaleX = null;\r\n    this.scaleY = null;\r\n    this.verticalAlign = null;\r\n    this.horizontalAlign = null;\r\n    this.tint = null;\r\n}\r\n\r\n\r\nmodule.exports = UISettings;\r\n\r\n\r\n\n},{}],6:[function(require,module,exports){\nvar UI = {\r\n    UISettings: require('./UISettings'),\r\n    UIBase: require('./UIBase'),\r\n    Container: require('./Container'),\r\n    SliceSprite: require('./SliceSprite'),\r\n    Text: require('./Text')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI, UI);\r\n\r\nmodule.exports = UI;\r\n\n},{\"./Container\":1,\"./SliceSprite\":2,\"./Text\":3,\"./UIBase\":4,\"./UISettings\":5}]},{},[6])\n\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * A sliced sprite with dynamic width and height.\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Sprite {PIXI.Sprite} the sprite for this SliceSprite\r\n * @param BorderWidth {Number} Width of the sprite borders\r\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\r\n * @param horizontalSlice {Boolean} Slice the sprite vertically\r\n */\r\nfunction SliceSprite(sprite, borderWidth, horizontalSlice, verticalSlice) {\r\n    UIBase.call(this, sprite.width, sprite.height);\r\n\r\n    var ftl, ftr, fbl, fbr, ft, fb, fl, fr, ff, stl, str, sbl, sbr, st, sb, sl, sr, sf,\r\n        bw = borderWidth || 5,\r\n        vs = typeof verticalSlice !== \"undefined\" ? verticalSlice : true,\r\n        hs = typeof horizontalSlice !== \"undefined\" ? horizontalSlice : true,\r\n        t = sprite.texture.baseTexture,\r\n        f = sprite.texture.frame;\r\n\r\n\r\n    //get frames\r\n    if (vs && hs) {\r\n        ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\r\n        ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\r\n        fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\r\n        fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\r\n        ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\r\n        fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\r\n        fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\r\n    }\r\n    else if (hs) {\r\n        fl = new PIXI.Rectangle(f.x, f.y, bw, f.height);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\r\n    }\r\n    else { //vs\r\n        ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\r\n        fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\r\n        ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\r\n    }\r\n\r\n    //TODO: swap frames if rotation\r\n\r\n\r\n\r\n    //make sprites\r\n    sf = new PIXI.Sprite(new PIXI.Texture(t, ff));\r\n    this.container.addChild(sf);\r\n    if (vs && hs) {\r\n        stl = new PIXI.Sprite(new PIXI.Texture(t, ftl));\r\n        str = new PIXI.Sprite(new PIXI.Texture(t, ftr));\r\n        sbl = new PIXI.Sprite(new PIXI.Texture(t, fbl));\r\n        sbr = new PIXI.Sprite(new PIXI.Texture(t, fbr));\r\n        this.container.addChild(stl, str, sbl, sbr);\r\n\r\n    }\r\n    if (hs) {\r\n        this.setting.minWidth = bw * 2;\r\n        sl = new PIXI.Sprite(new PIXI.Texture(t, fl));\r\n        sr = new PIXI.Sprite(new PIXI.Texture(t, fr));\r\n        this.container.addChild(sl, sr);\r\n    }\r\n    if (vs) {\r\n        this.setting.minHeight = bw * 2;\r\n        st = new PIXI.Sprite(new PIXI.Texture(t, ft));\r\n        sb = new PIXI.Sprite(new PIXI.Texture(t, fb));\r\n        this.container.addChild(st, sb);\r\n    }\r\n\r\n    //set constant position and sizes\r\n    if (vs && hs) st.x = sb.x = sl.y = sr.y = stl.width = str.width = sbl.width = sbr.width = stl.height = str.height = sbl.height = sbr.height = bw;\r\n    if (hs) sf.x = sl.width = sr.width = bw;\r\n    if (vs) sf.y = st.height = sb.height = bw;\r\n}\r\n\r\nSliceSprite.prototype = Object.create(UIBase.prototype);\r\nSliceSprite.prototype.constructor = SliceSprite;\r\nmodule.exports = SliceSprite;\r\n\r\n/**\r\n * Updates the sliced sprites position and size\r\n *\r\n * @private\r\n */\r\nSliceSprite.prototype.update = function () {\r\n    if (vs && hs) {\r\n        str.x = sbr.x = sr.x = this.width - bw;\r\n        sbl.y = sbr.y = sb.y = this.height - bw;\r\n        sf.width = st.width = sb.width = this.width - bw * 2;\r\n        sf.height = sl.height = sr.height = this.height - bw * 2;\r\n    }\r\n    else if (hs) {\r\n        sr.x = this.width - bw;\r\n        sl.height = sr.height = sf.height = this.height;\r\n        sf.width = this.width - bw * 2;\r\n    }\r\n    else { //vs\r\n        sb.y = this.height - bw;\r\n        st.width = sb.width = sf.width = this.width;\r\n        sf.height = this.height - bw * 2;\r\n    }\r\n\r\n    if (this.tint != null) {\r\n        sf.tint = this.tint;\r\n        if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\r\n        if (hs) sl.tint = sr.tint = this.tint;\r\n        if (vs) st.tint = sb.tint = this.tint;\r\n    }\r\n};\r\n\r\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI text object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Text {String} Text content\r\n * @param TextStyle {PIXI.TextStyle} Style used for the Text\r\n */\r\nfunction Text(text, PIXITextStyle) {\r\n    this.text = new PIXI.Text(text, PIXITextStyle);\r\n    UIBase.call(this, this.text.width, this.text.height);\r\n    this.container.addChild(this.text);\r\n}\r\n\r\nText.prototype = Object.create(UIBase.prototype);\r\nText.prototype.constructor = Text;\r\nmodule.exports = Text;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nText.prototype.update = function () {\r\n    if (this.tint != null)\r\n        text.tint = this.tint;\r\n};\r\n\r\n","var UISettings = require('./UISettings');\r\n\r\n/**\r\n * Base class of all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the UIObject\r\n * @param height {Number} Height of the UIObject\r\n */\r\nfunction UIBase(width, height) {\r\n    this.container = new PIXI.Container();\r\n    this.setting = new UISettings();\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n}\r\n\r\nUIBase.prototype.constructor = UIBase;\r\nmodule.exports = UIBase;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updatesettings = function () {\r\n    this.baseUpdate();\r\n    this.update();\r\n    this.updateChildren();\r\n};\r\n\r\n/**\r\n * Update method (override from other UIObjects)\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.update = function () {\r\n};\r\n\r\n/**\r\n * Updates the UIObject with all base settings\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.baseUpdate = function () {\r\n    var parentWidth = this.parent != null ? this.parent.width : window.innerWidth;\r\n    var parentHeight = this.parent != null ? this.parent.height : window.innerHeight;\r\n    this.setting.height = this.setting._height;\r\n    this.setting.width = this.setting._width;\r\n\r\n    //percentage convertions\r\n    if (this.setting.widthPct != null)\r\n        this.setting.width = parentWidth * this.setting.widthPct;\r\n    if (this.setting.heightPct != null)\r\n        this.setting.height = parentHeight * this.setting.heightPct;\r\n    if (this.setting.minWidthPct != null)\r\n        this.setting.minWidth = parentWidth * this.setting.minWidthPct;\r\n    if (this.setting.minHeightPct != null)\r\n        this.setting.minHeight = parentHeight * this.setting.minHeightPct;\r\n    if (this.setting.maxWidthPct != null)\r\n        this.setting.maxWidth = parentWidth * this.setting.maxWidthPct;\r\n    if (this.setting.maxHeightPct != null)\r\n        this.setting.maxHeight = parentHeight * this.setting.maxHeightPct;\r\n    if (this.setting.leftPct != null)\r\n        this.setting.left = parentWidth * this.setting.leftPct;\r\n    if (this.setting.rightPct != null)\r\n        this.setting.right = parentWidth * this.setting.rightPct;\r\n    if (this.setting.topPct != null)\r\n        this.setting.top = parentHeight * this.setting.topPct;\r\n    if (this.setting.bottomPct != null)\r\n        this.setting.bottom = parentHeight * this.setting.bottomPct;\r\n    if (this.setting.anchorLeftPct != null)\r\n        this.setting.anchorLeft = parentWidth * this.setting.anchorLeftPct;\r\n    if (this.setting.anchorRightPct != null)\r\n        this.setting.anchorRight = parentWidth * this.setting.anchorRightPct;\r\n    if (this.setting.anchorTopPct != null)\r\n        this.setting.anchorTop = parentHeight * this.setting.anchorTopPct;\r\n    if (this.setting.anchorBottomPct != null)\r\n        this.setting.anchorBottom = parentHeight * this.setting.anchorBottomPct;\r\n\r\n    if (this.horizontalAlign == null) {\r\n        //get anchors (use left right if conflict)\r\n        var anchorLeft = this.anchorLeft;\r\n        var anchorRight = this.anchorRight;\r\n        if (anchorLeft != null && anchorRight == null && this.right != null)\r\n            anchorRight = this.right;\r\n        else if (anchorLeft == null && anchorRight != null && this.left != null)\r\n            anchorLeft = this.left;\r\n        else if (anchorLeft == null && anchorRight == null && this.left != null && this.right != null) {\r\n            anchorLeft = this.left;\r\n            anchorRight = this.right;\r\n        }\r\n\r\n        var useHorizontalAnchor = anchorLeft != null || anchorRight != null;\r\n        var useLeftRight = !useHorizontalAnchor && (this.left != null || this.right != null);\r\n\r\n        if (useLeftRight) {\r\n            if (this.left != null)\r\n                this.container.position.x = this.left;\r\n            else if (this.right != null)\r\n                this.container.position.x = parentWidth - this.right;\r\n        }\r\n        else if (useHorizontalAnchor) {\r\n            if (anchorLeft != null && anchorRight == null)\r\n                this.container.position.x = anchorLeft;\r\n            else if (anchorLeft == null && anchorRight != null)\r\n                this.container.position.x = parentWidth - this.width - anchorRight;\r\n            else if (anchorLeft != null && anchorRight != null) {\r\n                this.container.position.x = anchorLeft;\r\n                this.setting.width = parentWidth - anchorLeft - anchorRight;\r\n            }\r\n            this.container.position.x += this.pivotX * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.x = 0;\r\n        }\r\n    }\r\n\r\n    if (this.verticalAlign == null) {\r\n        //get anchors (use top bottom if conflict)\r\n        var anchorTop = this.anchorTop;\r\n        var anchorBottom = this.anchorBottom;\r\n        if (anchorTop != null && anchorBottom == null && this.bottom != null)\r\n            anchorBottom = this.bottom;\r\n        if (anchorTop == null && anchorBottom != null && this.top != null)\r\n            anchorTop = this.top;\r\n\r\n        var useVerticalAnchor = anchorTop != null || anchorBottom != null;\r\n        var useTopBottom = !useVerticalAnchor && (this.top != null || this.bottom != null);\r\n\r\n        if (useTopBottom) {\r\n            if (this.top != null)\r\n                this.container.position.y = this.top;\r\n            else if (this.bottom != null)\r\n                this.container.position.y = parentHeight - this.bottom;\r\n        }\r\n        else if (useVerticalAnchor) {\r\n            if (anchorTop != null && anchorBottom == null)\r\n                this.container.position.y = anchorTop;\r\n            else if (anchorTop == null && anchorBottom != null)\r\n                this.container.position.y = parentHeight - this.height - anchorBottom;\r\n            else if (anchorTop != null && anchorBottom != null) {\r\n                this.container.position.y = anchorTop;\r\n                this.setting.height = parentHeight - anchorTop - anchorBottom;\r\n            }\r\n            this.container.position.y += this.pivotY * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.y = 0;\r\n        }\r\n    }\r\n\r\n    //min/max sizes\r\n    if (this.setting.maxWidth != null && this.setting.width > this.setting.maxWidth) this.setting.width = this.setting.maxWidth;\r\n    if (this.setting.width < this.setting.minWidth) this.setting.width = this.setting.minWidth;\r\n\r\n    if (this.setting.maxHeight != null && this.setting.height > this.setting.maxHeight) this.setting.height = this.setting.maxHeight;\r\n    if (this.setting.height < this.setting.minHeight) this.setting.height = this.setting.minHeight;\r\n\r\n\r\n    //pure vertical/horizontal align\r\n    if (this.horizontalAlign != null) {\r\n        if (this.horizontalAlign == \"center\")\r\n            this.container.position.x = parentWidth * 0.5 - this.width * 0.5;\r\n        else if (this.horizontalAlign == \"right\")\r\n            this.container.position.x = parentWidth - this.width;\r\n        else\r\n            this.container.position.x = 0;\r\n        this.container.position.x += this.width * this.pivotX;\r\n    }\r\n    if (this.verticalAlign != null) {\r\n        if (this.verticalAlign == \"middle\")\r\n            this.container.position.y = parentHeight * 0.5 - this.height * 0.5;\r\n        else if (this.verticalAlign == \"bottom\")\r\n            this.container.position.y = parentHeight - this.height;\r\n        else\r\n            this.container.position.y = 0;\r\n        this.container.position.y += this.height * this.pivotY;\r\n    }\r\n\r\n\r\n\r\n    //scale\r\n    if (this.setting.scaleX != null) this.container.scale.x = this.setting.scaleX;\r\n    if (this.setting.scaleY != null) this.container.scale.y = this.setting.scaleY;\r\n\r\n    //pivot\r\n    if (this.setting.pivotX != null) this.container.pivot.x = this.setting.width * this.setting.pivotX;\r\n    if (this.setting.pivotY != null) this.container.pivot.y = this.setting.height * this.setting.pivotY;\r\n\r\n    this.container.position.x = Math.round(this.container.position.x);\r\n    this.container.position.y = Math.round(this.container.position.y);\r\n};\r\n\r\n/**\r\n * Updates all UI Children\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updateChildren = function () {\r\n    for (var i = 0; i < this.children.length; i++) {\r\n        this.children[i].updatesettings();\r\n    }\r\n};\r\n\r\nUIBase.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent) {\r\n            UIObject.parent.removeChild(UIObject);\r\n        }\r\n\r\n        UIObject.parent = this;\r\n        this.container.addChild(UIObject.container);\r\n        this.children.push(UIObject);\r\n        this.updatesettings();\r\n    }\r\n\r\n    return UIObject;\r\n}\r\n\r\nUIBase.prototype.removeChild = function (UIObject) {\r\n    var i = this.children.indexOf(UIObject);\r\n    if (i != -1) {\r\n        this.container.removeChild(UIObject.container);\r\n        this.children.splice(i, 1);\r\n        UIObject.parent = null;\r\n    }\r\n}\r\n\r\nObject.defineProperties(UIBase.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this.setting.width;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.widthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.widthPct = null;\r\n                this.setting._width = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this.setting.height;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.heightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.heightPct = null;\r\n                this.setting._height = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minWidth: {\r\n        get: function () {\r\n            return this.setting.minWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinWidth = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinWidth = null;\r\n                this.setting.minWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minHeight: {\r\n        get: function () {\r\n            return this.setting.minHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinHeight = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinHeight = null;\r\n                this.setting.minHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxWidth: {\r\n        get: function () {\r\n            return this.setting.maxWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxWidthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxWidthPct = null;\r\n                this.setting.maxWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxHeight: {\r\n        get: function () {\r\n            return this.setting.maxHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxHeightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxHeightPct = null;\r\n                this.setting.maxHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorLeft: {\r\n        get: function () {\r\n            return this.setting.anchorLeft;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorLeftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorLeftPct = null;\r\n                this.setting.anchorLeft = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorRight: {\r\n        get: function () {\r\n            return this.setting.anchorRight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorRightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorRightPct = null;\r\n                this.setting.anchorRight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorTop: {\r\n        get: function () {\r\n            return this.setting.anchorTop;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorTopPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorTopPct = null;\r\n                this.setting.anchorTop = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorBottom: {\r\n        get: function () {\r\n            return this.setting.anchorBottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorBottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorBottomPct = null;\r\n                this.setting.anchorBottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    verticalAlign: {\r\n        get: function () {\r\n            return this.setting.verticalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.verticalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    horizontalAlign: {\r\n        get: function () {\r\n            return this.setting.horizontalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.horizontalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    tint: {\r\n        get: function () {\r\n            return this.setting.tint;\r\n        },\r\n        set: function (val) {\r\n            this.setting.tint = val;\r\n            this.update();\r\n        }\r\n    },\r\n    pivotX: {\r\n        get: function () {\r\n            return this.setting.pivotX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotY: {\r\n        get: function () {\r\n            return this.setting.pivotY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivot: {\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleX: {\r\n        get: function () {\r\n            return this.setting.scaleX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleY: {\r\n        get: function () {\r\n            return this.setting.scaleY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scale: {\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    left: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.leftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.leftPct = null;\r\n                this.setting.left = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    right: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.rightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.rightPct = null;\r\n                this.setting.right = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    top: {\r\n        get: function () {\r\n            return this.setting.top;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.topPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.topPct = null;\r\n                this.setting.top = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    bottom: {\r\n        get: function () {\r\n            return this.setting.bottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') != -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.bottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.bottomPct = null;\r\n                this.setting.bottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    x: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            this.left = val;\r\n        }\r\n    },\r\n    y: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            this.top = val;\r\n        }\r\n    },\r\n});\r\n","/**\r\n * Settings object for all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n */\r\nfunction UISettings() {\r\n    this._width = 0;\r\n    this.width = 0;\r\n    this.widthPct = null;\r\n    this._height = 0;\r\n    this.height = 0;\r\n    this.heightPct = null;\r\n    this.minWidth = 0;\r\n    this.minWidthPct = null;\r\n    this.minHeight = 0;\r\n    this.minHeightPct = null;\r\n    this.maxWidth = null;\r\n    this.maxWidthPct = null;\r\n    this.maxHeight = null;\r\n    this.maxHeightPct = null;\r\n    this.left = null;\r\n    this.leftPct = null;\r\n    this.right = null;\r\n    this.rightPct = null;\r\n    this.top = null;\r\n    this.topPct = null;\r\n    this.bottom = null;\r\n    this.bottomPct = null;\r\n    this.anchorLeft = null;\r\n    this.anchorLeftPct = null;\r\n    this.anchorRight = null;\r\n    this.anchorRightPct = null;\r\n    this.anchorTop = null;\r\n    this.anchorTopPct = null;\r\n    this.anchorBottom = null;\r\n    this.anchorBottomPct = null;\r\n    this.pivotX = null;\r\n    this.pivotY = null;\r\n    this.scaleX = null;\r\n    this.scaleY = null;\r\n    this.verticalAlign = null;\r\n    this.horizontalAlign = null;\r\n    this.tint = null;\r\n}\r\n\r\n\r\nmodule.exports = UISettings;\r\n\r\n\r\n","var UI = {\r\n    UISettings: require('./UISettings'),\r\n    UIBase: require('./UIBase'),\r\n    Container: require('./Container'),\r\n    SliceSprite: require('./SliceSprite'),\r\n    Text: require('./Text')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI, UI);\r\n\r\nmodule.exports = UI;\r\n"],"sourceRoot":"./"}
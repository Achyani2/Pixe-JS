{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Container.js","src/ScrollingContainer.js","src/SliceSprite.js","src/SortableList.js","src/Sprite.js","src/Stage.js","src/Text.js","src/UI.js","src/UIBase.js","src/UISettings.js","src"],"names":[],"mappings":";;;;;;;AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-ui.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction Container(width, height) {\r\n    UIBase.call(this, width, height);\r\n    this.container.hitArea = new PIXI.Rectangle(0,0,width,height);\r\n\r\n    this.update = function () {\r\n        this.container.hitArea.width = this.width;\r\n        this.container.hitArea.height = this.height;\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\nContainer.prototype = Object.create(UIBase.prototype);\r\nContainer.prototype.constructor = Container;\r\nmodule.exports = Container;\r\n\r\n","var UIBase = require('./UIBase'),\r\n    Container = require('./Container');\r\n\r\n/**\r\n * An UI Container object with overflow hidden and possibility to enable scrolling\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction ScrollingContainer(width, height, scrollX, scrollY, cornerRadius) {\r\n    Container.call(this, width, height);\r\n    this.mask = new PIXI.Graphics();\r\n    this.innerContainer = new PIXI.Container();\r\n    this.container.addChild(this.innerContainer);\r\n    this.container.addChild(this.mask);\r\n    this.container.mask = this.mask;\r\n    this.scrollX = scrollX;\r\n    this.scrollY = scrollY;\r\n    this.cornerRadius = cornerRadius || 0;\r\n    \r\n    \r\n    \r\n    this.update = function () {\r\n        if (this._lastWidth != this.width || this._lastHeight != this.height) {\r\n            this.mask.clear();\r\n            this.mask.lineStyle(0);\r\n            if (this.cornerRadius == 0) {\r\n                this.mask.beginFill(0xFFFFFF, 1);\r\n                this.mask.drawRect(0, 0, this.width, this.height);\r\n            }\r\n            else {\r\n                this.mask.beginFill(0xFFFFFF, 1);\r\n                this.mask.drawRoundedRect(0, 0, this.width, this.height, this.cornerRadius);\r\n            }\r\n            this._lastWidth = this.width;\r\n            this._lastHeight = this.height;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\nScrollingContainer.prototype = Object.create(Container.prototype);\r\nScrollingContainer.prototype.constructor = ScrollingContainer;\r\nmodule.exports = ScrollingContainer;\r\n\r\n\r\n\r\nObject.defineProperties(ScrollingContainer.prototype, {\r\n    overflowHidden: {\r\n        get: function () {\r\n            return this._overflowHidden;\r\n        },\r\n        set: function (val) {\r\n            this._overflowHidden = val;\r\n            this.updateOverflow();\r\n        }\r\n    },\r\n});\r\n\r\nScrollingContainer.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        Container.prototype.addChild.call(this, UIObject);\r\n        this.innerContainer.addChild(UIObject.container);\r\n    }\r\n    return UIObject;\r\n};\r\n\r\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * A sliced sprite with dynamic width and height.\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Texture {PIXI.Texture} the texture for this SliceSprite\r\n * @param BorderWidth {Number} Width of the sprite borders\r\n * @param horizontalSlice {Boolean} Slice the sprite horizontically\r\n * @param horizontalSlice {Boolean} Slice the sprite vertically\r\n */\r\nfunction SliceSprite(texture, borderWidth, horizontalSlice, verticalSlice) {\r\n    UIBase.call(this, texture.width, texture.height);\r\n\r\n    var ftl, ftr, fbl, fbr, ft, fb, fl, fr, ff, stl, str, sbl, sbr, st, sb, sl, sr, sf,\r\n        bw = borderWidth || 5,\r\n        vs = typeof verticalSlice !== \"undefined\" ? verticalSlice : true,\r\n        hs = typeof horizontalSlice !== \"undefined\" ? horizontalSlice : true,\r\n        t = texture.baseTexture,\r\n        f = texture.frame;\r\n\r\n\r\n    //get frames\r\n    if (vs && hs) {\r\n        ftl = new PIXI.Rectangle(f.x, f.y, bw, bw);\r\n        ftr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, bw);\r\n        fbl = new PIXI.Rectangle(f.x, f.y + f.height - bw, bw, bw);\r\n        fbr = new PIXI.Rectangle(f.x + f.width - bw, f.y + f.height - bw, bw, bw);\r\n        ft = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, bw);\r\n        fb = new PIXI.Rectangle(f.x + bw, f.y + f.height - bw, f.width - bw * 2, bw);\r\n        fl = new PIXI.Rectangle(f.x, f.y + bw, bw, f.height - bw * 2);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y + bw, bw, f.height - bw * 2);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y + bw, f.width - bw * 2, f.height - bw * 2);\r\n    }\r\n    else if (hs) {\r\n        fl = new PIXI.Rectangle(f.x, f.y, bw, f.height);\r\n        fr = new PIXI.Rectangle(f.x + f.width - bw, f.y, bw, f.height);\r\n        ff = new PIXI.Rectangle(f.x + bw, f.y, f.width - bw * 2, f.height);\r\n    }\r\n    else { //vs\r\n        ft = new PIXI.Rectangle(f.x, f.y, f.width, bw);\r\n        fb = new PIXI.Rectangle(f.x, f.y + f.height - bw, f.width, bw);\r\n        ff = new PIXI.Rectangle(f.x, f.y + bw, f.width, f.height - bw * 2);\r\n    }\r\n\r\n    //TODO: swap frames if rotation\r\n\r\n\r\n\r\n    //make sprites\r\n    sf = new PIXI.Sprite(new PIXI.Texture(t, ff));\r\n    this.container.addChild(sf);\r\n    if (vs && hs) {\r\n        stl = new PIXI.Sprite(new PIXI.Texture(t, ftl));\r\n        str = new PIXI.Sprite(new PIXI.Texture(t, ftr));\r\n        sbl = new PIXI.Sprite(new PIXI.Texture(t, fbl));\r\n        sbr = new PIXI.Sprite(new PIXI.Texture(t, fbr));\r\n        this.container.addChild(stl, str, sbl, sbr);\r\n\r\n    }\r\n    if (hs) {\r\n        this.setting.minWidth = bw * 2;\r\n        sl = new PIXI.Sprite(new PIXI.Texture(t, fl));\r\n        sr = new PIXI.Sprite(new PIXI.Texture(t, fr));\r\n        this.container.addChild(sl, sr);\r\n    }\r\n    if (vs) {\r\n        this.setting.minHeight = bw * 2;\r\n        st = new PIXI.Sprite(new PIXI.Texture(t, ft));\r\n        sb = new PIXI.Sprite(new PIXI.Texture(t, fb));\r\n        this.container.addChild(st, sb);\r\n    }\r\n\r\n    //set constant position and sizes\r\n    if (vs && hs) st.x = sb.x = sl.y = sr.y = stl.width = str.width = sbl.width = sbr.width = stl.height = str.height = sbl.height = sbr.height = bw;\r\n    if (hs) sf.x = sl.width = sr.width = bw;\r\n    if (vs) sf.y = st.height = sb.height = bw;\r\n\r\n\r\n    /**\r\n     * Updates the sliced sprites position and size\r\n     *\r\n     * @private\r\n     */\r\n    this.update = function () {\r\n        if (vs && hs) {\r\n            str.x = sbr.x = sr.x = this.width - bw;\r\n            sbl.y = sbr.y = sb.y = this.height - bw;\r\n            sf.width = st.width = sb.width = this.width - bw * 2;\r\n            sf.height = sl.height = sr.height = this.height - bw * 2;\r\n        }\r\n        else if (hs) {\r\n            sr.x = this.width - bw;\r\n            sl.height = sr.height = sf.height = this.height;\r\n            sf.width = this.width - bw * 2;\r\n        }\r\n        else { //vs\r\n            sb.y = this.height - bw;\r\n            st.width = sb.width = sf.width = this.width;\r\n            sf.height = this.height - bw * 2;\r\n        }\r\n\r\n        if (this.tint !== null) {\r\n            sf.tint = this.tint;\r\n            if (vs && hs) stl.tint = str.tint = sbl.tint = sbr.tint = this.tint;\r\n            if (hs) sl.tint = sr.tint = this.tint;\r\n            if (vs) st.tint = sb.tint = this.tint;\r\n        }\r\n\r\n        if (this.blendMode !== null) {\r\n            sf.blendMode = this.blendMode;\r\n            if (vs && hs) stl.blendMode = str.blendMode = sbl.blendMode = sbr.blendMode = this.blendMode;\r\n            if (hs) sl.blendMode = sr.blendMode = this.blendMode;\r\n            if (vs) st.blendMode = sb.blendMode = this.blendMode;\r\n        }\r\n    };\r\n}\r\n\r\nSliceSprite.prototype = Object.create(UIBase.prototype);\r\nSliceSprite.prototype.constructor = SliceSprite;\r\nmodule.exports = SliceSprite;\r\n\r\n\r\n\r\n","var Container = require('./Container');\r\n/**\r\n * An UI Container object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Container\r\n * @param height {Number} Height of the Container\r\n */\r\nfunction SortableList(desc) {\r\n    Container.call(this);\r\n    this.desc = typeof desc !== \"undefined\" ? desc : true;\r\n    this.items = [];\r\n\r\n}\r\n\r\nSortableList.prototype = Object.create(Container.prototype);\r\nSortableList.prototype.constructor = SortableList;\r\nmodule.exports = SortableList;\r\n\r\nSortableList.prototype.addChild = function (UIObject, fnValue, fnThenBy) {\r\n    Container.prototype.addChild.call(this, UIObject);\r\n    if (this.items.indexOf(UIObject) == -1) {\r\n        this.items.push(UIObject);\r\n    }\r\n\r\n    if (typeof fnValue === \"function\")\r\n        UIObject._sortListValue = fnValue;\r\n\r\n    if (typeof fnThenBy === \"function\")\r\n        UIObject._sortListThenByValue = fnThenBy;\r\n\r\n    if (!UIObject._sortListRnd)\r\n        UIObject._sortListRnd = Math.random();\r\n\r\n\r\n\r\n    this.sort();\r\n}\r\n\r\nSortableList.prototype.removeChild = function (UIObject) {\r\n    if (arguments.length > 1) {\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            this.removeChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        Container.prototype.removeChild.call(this, UIObject);\r\n        var index = this.items.indexOf(UIObject);\r\n        if (index != -1) {\r\n            this.items.splice(index, 1);\r\n        }\r\n        this.sort();\r\n    }\r\n}\r\n\r\nSortableList.prototype.sort = function () {\r\n    var desc = this.desc;\r\n    this.items.sort(function (a, b) {\r\n        var res = a._sortListValue() < b._sortListValue() ? desc ? 1 : -1 :\r\n                  a._sortListValue() > b._sortListValue() ? desc ? -1 : 1 : 0;\r\n\r\n        if (res == 0 && a._sortListThenByValue && b._sortListThenByValue) {\r\n            res = a._sortListThenByValue() < b._sortListThenByValue() ? desc ? 1 : -1 :\r\n                  a._sortListThenByValue() > b._sortListThenByValue() ? desc ? -1 : 1 : 0;\r\n        }\r\n        if (res == 0) {\r\n            res = a._sortListRnd > b._sortListRnd ? 1 :\r\n                  a._sortListRnd < b._sortListRnd ? -1 : 0;\r\n        }\r\n        return res;\r\n    });\r\n\r\n    var y = 0\r\n    var alt = true;\r\n    for (var i = 0; i < this.items.length; i++) {\r\n        alt = !alt;\r\n        var item = this.items[i];\r\n        item.y = y;\r\n        y += item.height;\r\n        if (typeof item.altering === \"function\")\r\n            item.altering(alt);\r\n    }\r\n}\r\n\r\n\r\n\r\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI sprite object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Texture {PIXI.Texture} The texture for the sprite\r\n */\r\nfunction Sprite(t) {\r\n    this.sprite = new PIXI.Sprite(t);\r\n    UIBase.call(this, this.sprite.width, this.sprite.height);\r\n    this.container.addChild(this.sprite);\r\n}\r\n\r\nSprite.prototype = Object.create(UIBase.prototype);\r\nSprite.prototype.constructor = Sprite;\r\nmodule.exports = Sprite;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nSprite.prototype.update = function () {\r\n    if (this.tint !== null)\r\n        this.sprite.tint = this.tint;\r\n\r\n    if (this.blendMode !== null)\r\n        this.sprite.blendMode = this.blendMode;\r\n\r\n    this.sprite.width = this.width;\r\n    this.sprite.height = this.height;\r\n};\r\n\r\n","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * A Stage for UIObjects\r\n *\r\n * @class\r\n * @extends PIXI.UI.Container\r\n * @memberof PIXI.UI\r\n * @param width {Number} Width of the Stage\r\n * @param height {Number} Height of the Stage\r\n */\r\nfunction Stage(width, height) {\r\n    this._width = width;\r\n    this._height = height;\r\n    PIXI.Container.call(this);\r\n    this.UIChildren = [];\r\n}\r\n\r\nStage.prototype = Object.create(PIXI.Container.prototype);\r\nStage.prototype.constructor = Stage;\r\nmodule.exports = Stage;\r\n\r\nStage.prototype.addChild = function (UIObject) {\r\n    var argumentLenght = arguments.length;\r\n    if (argumentLenght > 1) {\r\n        for (var i = 0; i < argumentLenght; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent !== null)\r\n            UIObject.parent.removeChild(UIObject);\r\n\r\n        UIObject.parent = this;\r\n        this.UIChildren.push(UIObject);\r\n        PIXI.Container.prototype.addChild.call(this, UIObject.container);\r\n    }\r\n};\r\n\r\nStage.prototype.removeChild = function (UIObject) {\r\n    var argumentLenght = arguments.length;\r\n    if (argumentLenght > 1) {\r\n        for (var i = 0; i < argumentLenght; i++) {\r\n            this.removeChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        var index = this.UIChildren.indexOf(UIObject);\r\n        if (index != -1) {\r\n            this.UIChildren.splice(index, 1);\r\n            UIObject.parent = null;\r\n        }\r\n        PIXI.Container.prototype.addChild.call(this, UIObject.container);\r\n    }\r\n};\r\n\r\nStage.prototype.resize = function (width, height) {\r\n    if (!isNaN(height)) this._height = height;\r\n    if (!isNaN(width)) this._width = width;\r\n\r\n    for (var i = 0; i < this.UIChildren.length; i++)\r\n        this.UIChildren[i].updatesettings();\r\n};\r\n\r\nObject.defineProperties(Stage.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this._width;\r\n        },\r\n        set: function (val) {\r\n            if (!isNaN(val)) {\r\n                this._width = val;\r\n                this.resize();\r\n            }\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this._height;\r\n        },\r\n        set: function (val) {\r\n            if (!isNaN(val)) {\r\n                this._height = val;\r\n                this.resize();\r\n            }\r\n        }\r\n    }\r\n});","var UIBase = require('./UIBase');\r\n\r\n/**\r\n * An UI text object\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @memberof PIXI.UI\r\n * @param Text {String} Text content\r\n * @param TextStyle {PIXI.TextStyle} Style used for the Text\r\n */\r\nfunction Text(text, PIXITextStyle) {\r\n    this.text = new PIXI.Text(text, PIXITextStyle);\r\n    UIBase.call(this, this.text.width, this.text.height);\r\n    this.container.addChild(this.text);\r\n}\r\n\r\nText.prototype = Object.create(UIBase.prototype);\r\nText.prototype.constructor = Text;\r\nmodule.exports = Text;\r\n\r\n/**\r\n * Updates the text\r\n *\r\n * @private\r\n */\r\nText.prototype.update = function () {\r\n    if (this.tint !== null)\r\n        text.tint = this.tint;\r\n\r\n    if (this.blendMode !== null)\r\n        this.text.blendMode = this.blendMode;\r\n};\r\n\r\n","var UI = {\r\n    UISettings: require('./UISettings'),\r\n    UIBase: require('./UIBase'),\r\n    Stage: require('./Stage'),\r\n    Container: require('./Container'),\r\n    ScrollingContainer: require('./ScrollingContainer'),\r\n    SortableList: require('./SortableList'),\r\n    Sprite: require('./Sprite'),\r\n    SliceSprite: require('./SliceSprite'),\r\n    Text: require('./Text')\r\n};\r\n\r\nmodule.exports = UI;","var UISettings = require('./UISettings'),\r\n    UI = require('./UI')\r\n\r\n/**\r\n * Base class of all UIObjects\r\n *\r\n * @class\r\n * @extends PIXI.UI.UIBase\r\n * @param width {Number} Width of the UIObject\r\n * @param height {Number} Height of the UIObject\r\n */\r\nfunction UIBase(width, height) {\r\n    this.container = new PIXI.Container();\r\n\r\n    this.setting = new UISettings();\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n    this._draggable = false;\r\n    this.container.interactiveChildren = true;\r\n}\r\n\r\nUIBase.prototype.constructor = UIBase;\r\nmodule.exports = UIBase;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updatesettings = function () {\r\n    this.baseupdate();\r\n    this.update();\r\n    this.updateChildren();\r\n};\r\n\r\n/**\r\n * Update method (override from other UIObjects)\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.update = function () {\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Updates the UIObject with all base settings\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.baseupdate = function () {\r\n    var parentWidth = this.parent !== null ? this.parent.width : 0;\r\n    var parentHeight = this.parent !== null ? this.parent.height : 0;\r\n    this.setting.height = this.setting._height;\r\n    this.setting.width = this.setting._width;\r\n\r\n    //percentage convertions\r\n    if (this.setting.widthPct !== null)\r\n        this.setting.width = parentWidth * this.setting.widthPct;\r\n    if (this.setting.heightPct !== null)\r\n        this.setting.height = parentHeight * this.setting.heightPct;\r\n    if (this.setting.minWidthPct !== null)\r\n        this.setting.minWidth = parentWidth * this.setting.minWidthPct;\r\n    if (this.setting.minHeightPct !== null)\r\n        this.setting.minHeight = parentHeight * this.setting.minHeightPct;\r\n    if (this.setting.maxWidthPct !== null)\r\n        this.setting.maxWidth = parentWidth * this.setting.maxWidthPct;\r\n    if (this.setting.maxHeightPct !== null)\r\n        this.setting.maxHeight = parentHeight * this.setting.maxHeightPct;\r\n    if (this.setting.leftPct !== null)\r\n        this.setting.left = parentWidth * this.setting.leftPct;\r\n    if (this.setting.rightPct !== null)\r\n        this.setting.right = parentWidth * this.setting.rightPct;\r\n    if (this.setting.topPct !== null)\r\n        this.setting.top = parentHeight * this.setting.topPct;\r\n    if (this.setting.bottomPct !== null)\r\n        this.setting.bottom = parentHeight * this.setting.bottomPct;\r\n    if (this.setting.anchorLeftPct !== null)\r\n        this.setting.anchorLeft = parentWidth * this.setting.anchorLeftPct;\r\n    if (this.setting.anchorRightPct !== null)\r\n        this.setting.anchorRight = parentWidth * this.setting.anchorRightPct;\r\n    if (this.setting.anchorTopPct !== null)\r\n        this.setting.anchorTop = parentHeight * this.setting.anchorTopPct;\r\n    if (this.setting.anchorBottomPct !== null)\r\n        this.setting.anchorBottom = parentHeight * this.setting.anchorBottomPct;\r\n\r\n    if (this.horizontalAlign === null) {\r\n        //get anchors (use left right if conflict)\r\n        var anchorLeft = this.anchorLeft;\r\n        var anchorRight = this.anchorRight;\r\n        if (anchorLeft !== null && anchorRight === null && this.right !== null)\r\n            anchorRight = this.right;\r\n        else if (anchorLeft === null && anchorRight !== null && this.left !== null)\r\n            anchorLeft = this.left;\r\n        else if (anchorLeft === null && anchorRight === null && this.left !== null && this.right !== null) {\r\n            anchorLeft = this.left;\r\n            anchorRight = this.right;\r\n        }\r\n\r\n        var useHorizontalAnchor = anchorLeft !== null || anchorRight !== null;\r\n        var useLeftRight = !useHorizontalAnchor && (this.left !== null || this.right !== null);\r\n\r\n        if (useLeftRight) {\r\n            if (this.left !== null)\r\n                this.container.position.x = this.left;\r\n            else if (this.right !== null)\r\n                this.container.position.x = parentWidth - this.right;\r\n        }\r\n        else if (useHorizontalAnchor) {\r\n            if (anchorLeft !== null && anchorRight === null)\r\n                this.container.position.x = anchorLeft;\r\n            else if (anchorLeft === null && anchorRight !== null)\r\n                this.container.position.x = parentWidth - this.width - anchorRight;\r\n            else if (anchorLeft !== null && anchorRight !== null) {\r\n                this.container.position.x = anchorLeft;\r\n                this.setting.width = parentWidth - anchorLeft - anchorRight;\r\n            }\r\n            this.container.position.x += this.pivotX * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.x = 0;\r\n        }\r\n    }\r\n\r\n    if (this.verticalAlign === null) {\r\n        //get anchors (use top bottom if conflict)\r\n        var anchorTop = this.anchorTop;\r\n        var anchorBottom = this.anchorBottom;\r\n        if (anchorTop !== null && anchorBottom === null && this.bottom !== null)\r\n            anchorBottom = this.bottom;\r\n        if (anchorTop === null && anchorBottom !== null && this.top !== null)\r\n            anchorTop = this.top;\r\n\r\n        var useVerticalAnchor = anchorTop !== null || anchorBottom !== null;\r\n        var useTopBottom = !useVerticalAnchor && (this.top !== null || this.bottom !== null);\r\n\r\n        if (useTopBottom) {\r\n            if (this.top !== null)\r\n                this.container.position.y = this.top;\r\n            else if (this.bottom !== null)\r\n                this.container.position.y = parentHeight - this.bottom;\r\n        }\r\n        else if (useVerticalAnchor) {\r\n            if (anchorTop !== null && anchorBottom === null)\r\n                this.container.position.y = anchorTop;\r\n            else if (anchorTop === null && anchorBottom !== null)\r\n                this.container.position.y = parentHeight - this.height - anchorBottom;\r\n            else if (anchorTop !== null && anchorBottom !== null) {\r\n                this.container.position.y = anchorTop;\r\n                this.setting.height = parentHeight - anchorTop - anchorBottom;\r\n            }\r\n            this.container.position.y += this.pivotY * this.setting.width;\r\n        }\r\n        else {\r\n            this.container.position.y = 0;\r\n        }\r\n    }\r\n\r\n    //min/max sizes\r\n    if (this.setting.maxWidth !== null && this.setting.width > this.setting.maxWidth) this.setting.width = this.setting.maxWidth;\r\n    if (this.setting.width < this.setting.minWidth) this.setting.width = this.setting.minWidth;\r\n\r\n    if (this.setting.maxHeight !== null && this.setting.height > this.setting.maxHeight) this.setting.height = this.setting.maxHeight;\r\n    if (this.setting.height < this.setting.minHeight) this.setting.height = this.setting.minHeight;\r\n\r\n\r\n    //pure vertical/horizontal align\r\n    if (this.horizontalAlign !== null) {\r\n        if (this.horizontalAlign == \"center\")\r\n            this.container.position.x = parentWidth * 0.5 - this.width * 0.5;\r\n        else if (this.horizontalAlign == \"right\")\r\n            this.container.position.x = parentWidth - this.width;\r\n        else\r\n            this.container.position.x = 0;\r\n        this.container.position.x += this.width * this.pivotX;\r\n    }\r\n    if (this.verticalAlign !== null) {\r\n        if (this.verticalAlign == \"middle\")\r\n            this.container.position.y = parentHeight * 0.5 - this.height * 0.5;\r\n        else if (this.verticalAlign == \"bottom\")\r\n            this.container.position.y = parentHeight - this.height;\r\n        else\r\n            this.container.position.y = 0;\r\n        this.container.position.y += this.height * this.pivotY;\r\n    }\r\n\r\n\r\n    //Unrestricted dragging\r\n    if (this.dragging && !this.setting.dragRestricted) {\r\n        this.container.position.x = this.left;\r\n        this.container.position.y = this.top;\r\n    }\r\n\r\n\r\n    //scale\r\n    if (this.setting.scaleX !== null) this.container.scale.x = this.setting.scaleX;\r\n    if (this.setting.scaleY !== null) this.container.scale.y = this.setting.scaleY;\r\n\r\n    //pivot\r\n    if (this.setting.pivotX !== null) this.container.pivot.x = this.setting.width * this.setting.pivotX;\r\n    if (this.setting.pivotY !== null) this.container.pivot.y = this.setting.height * this.setting.pivotY;\r\n\r\n    if (this.setting.alpha !== null) this.container.alpha = this.setting.alpha;\r\n    if (this.setting.rotation !== null) this.container.rotation = this.setting.rotation;\r\n\r\n    this.container.position.x = Math.round(this.container.position.x);\r\n    this.container.position.y = Math.round(this.container.position.y);\r\n};\r\n\r\n/**\r\n * Updates all UI Children\r\n *\r\n * @private\r\n */\r\nUIBase.prototype.updateChildren = function () {\r\n    for (var i = 0; i < this.children.length; i++) {\r\n        this.children[i].updatesettings();\r\n    }\r\n};\r\n\r\nUIBase.prototype.addChild = function (UIObject) {\r\n    var argumentsLength = arguments.length;\r\n    if (argumentsLength > 1) {\r\n        for (var i = 0; i < argumentsLength; i++) {\r\n            this.addChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        if (UIObject.parent) {\r\n            UIObject.parent.removeChild(UIObject);\r\n        }\r\n\r\n        UIObject.parent = this;\r\n        this.container.addChild(UIObject.container);\r\n        this.children.push(UIObject);\r\n        this.updatesettings();\r\n    }\r\n\r\n    return UIObject;\r\n};\r\n\r\nUIBase.prototype.removeChild = function (UIObject) {\r\n    var argumentLenght = arguments.length;\r\n    if (argumentLenght > 1) {\r\n        for (var i = 0; i < argumentLenght; i++) {\r\n            this.removeChild(arguments[i]);\r\n        }\r\n    }\r\n    else {\r\n        var index = this.children.indexOf(UIObject);\r\n        if (index !== -1) {\r\n            UIObject.container.parent.removeChild(UIObject.container);\r\n            this.children.splice(index, 1);\r\n            UIObject.parent = null;\r\n        }\r\n    }\r\n};\r\n\r\nUIBase.prototype.clearDraggable = function () {\r\n    if (this.setting.draggable) {\r\n        this.container.removeListener('mousedown', this.onDragMove);\r\n        this.container.removeListener('touchstart', this.onDragMove);\r\n        document.removeEventListener(\"mousemove\", this.onDragMove);\r\n        document.removeEventListener(\"touchmove\", this.onDragMove);\r\n        document.removeEventListener('mouseup', this.onDragEnd);\r\n        document.removeEventListener('mouseupoutside', this.onDragEnd);\r\n        document.removeEventListener('touchend', this.onDragEnd);\r\n        document.removeEventListener('touchendoutside', this.onDragEnd);\r\n        this.setting.draggable = false;\r\n    }\r\n}\r\n\r\nUIBase.prototype.initDraggable = function () {\r\n    if (!this.setting.draggable) {\r\n        var container = this.container,\r\n            uiobject = this,\r\n            containerStart = new PIXI.Point(),\r\n            mouseStart = new PIXI.Point(),\r\n            stageOffset = new PIXI.Point();\r\n\r\n        this.container.interactive = true;\r\n\r\n        this.onDragStart = function (event) {\r\n            if (!uiobject.dragging) {\r\n                mouseStart.set(event.data.originalEvent.clientX, event.data.originalEvent.clientY);\r\n                containerStart.copy(container.position);\r\n                document.addEventListener('mousemove', uiobject.onDragMove);\r\n                document.addEventListener('touchmove', uiobject.onDragMove);\r\n            }\r\n        }\r\n\r\n        this.onDragMove = function (event) {\r\n            if (!uiobject.dragging) {\r\n                document.addEventListener('mouseup', uiobject.onDragEnd);\r\n                document.addEventListener('mouseupoutside', uiobject.onDragEnd);\r\n                document.addEventListener('touchend', uiobject.onDragEnd);\r\n                document.addEventListener('touchendoutside', uiobject.onDragEnd);\r\n                uiobject.dragging = true;\r\n                container.interactive = false;\r\n                PIXI.UI._dropTarget = null;\r\n\r\n                if (uiobject.dragContainer) {\r\n\r\n                    var c = uiobject.dragContainer.container ? uiobject.dragContainer.container : uiobject.dragContainer;\r\n                    console.log(\"before:\", uiobject.container.worldTransform);\r\n                    if (c) {\r\n                        stageOffset.set(c.worldTransform.tx - uiobject.parent.container.worldTransform.tx, c.worldTransform.ty - uiobject.parent.container.worldTransform.ty);\r\n                        c.addChild(uiobject.container);\r\n                    }\r\n                } else {\r\n                    stageOffset.set(0);\r\n                }\r\n            }\r\n\r\n            var x = event.clientX - mouseStart.x,\r\n                y = event.clientY - mouseStart.y;\r\n\r\n            uiobject.x = containerStart.x + x - stageOffset.x;\r\n            uiobject.y = containerStart.y + y - stageOffset.y;\r\n        }\r\n\r\n        this.onDragEnd = function (event) {\r\n            if (uiobject.dragging) {\r\n                uiobject.dragging = false;\r\n                container.interactive = true;\r\n                document.removeEventListener(\"mousemove\", uiobject.onDragMove);\r\n                document.removeEventListener(\"touchmove\", uiobject.onDragMove);\r\n                document.removeEventListener('mouseup', uiobject.onDragEnd);\r\n                document.removeEventListener('mouseupoutside', uiobject.onDragEnd);\r\n                document.removeEventListener('touchend', uiobject.onDragEnd);\r\n                document.removeEventListener('touchendoutside', uiobject.onDragEnd);\r\n\r\n                \r\n\r\n                setTimeout(function () {\r\n                    var x = event.clientX - mouseStart.x,\r\n                    y = event.clientY - mouseStart.y;\r\n                    uiobject.x = containerStart.x + x;\r\n                    uiobject.y = containerStart.y + y;\r\n\r\n                    if (PIXI.UI._dropTarget && PIXI.UI._dropTarget.dragGroup == uiobject.dragGroup) {\r\n                        PIXI.UI._dropTarget.addChild(uiobject);\r\n                    }\r\n                    else {\r\n                        uiobject.parent.addChild(uiobject);\r\n                    }                    \r\n                }, 0);\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        container.on('mousedown', this.onDragStart);\r\n        container.on('touchstart', this.onDragStart);\r\n        this.setting.draggable = true;\r\n    }\r\n};\r\n\r\nUIBase.prototype.clearDroppable = function () {\r\n    if (this.setting.droppable) {\r\n        this.container.removeListener('mouseup', this.onDrop);\r\n        this.container.removeListener('touchend', this.onDrop);\r\n        this.setting.droppable = false;\r\n    }\r\n}\r\n\r\nUIBase.prototype.initDroppable = function () {\r\n    if (!this.setting.droppable) {\r\n        var container = this.container,\r\n            uiobject = this;\r\n\r\n        this.container.interactive = true;\r\n        this.onDrop = function (event) {\r\n            if (uiobject.droppableParent != null)\r\n                PIXI.UI._dropTarget = uiobject.droppableParent;\r\n            else\r\n                PIXI.UI._dropTarget = uiobject;\r\n        }\r\n\r\n        container.on('mouseup', this.onDrop);\r\n        container.on('touchend', this.onDrop);\r\n        this.setting.droppable = true;\r\n    }\r\n};\r\n\r\nObject.defineProperties(UIBase.prototype, {\r\n    width: {\r\n        get: function () {\r\n            return this.setting.width;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.widthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.widthPct = null;\r\n                this.setting._width = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    height: {\r\n        get: function () {\r\n            return this.setting.height;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.heightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.heightPct = null;\r\n                this.setting._height = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minWidth: {\r\n        get: function () {\r\n            return this.setting.minWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinWidth = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinWidth = null;\r\n                this.setting.minWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    minHeight: {\r\n        get: function () {\r\n            return this.setting.minHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.percentageMinHeight = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.percentageMinHeight = null;\r\n                this.setting.minHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxWidth: {\r\n        get: function () {\r\n            return this.setting.maxWidth;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxWidthPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxWidthPct = null;\r\n                this.setting.maxWidth = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    maxHeight: {\r\n        get: function () {\r\n            return this.setting.maxHeight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.maxHeightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.maxHeightPct = null;\r\n                this.setting.maxHeight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorLeft: {\r\n        get: function () {\r\n            return this.setting.anchorLeft;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorLeftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorLeftPct = null;\r\n                this.setting.anchorLeft = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorRight: {\r\n        get: function () {\r\n            return this.setting.anchorRight;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorRightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorRightPct = null;\r\n                this.setting.anchorRight = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorTop: {\r\n        get: function () {\r\n            return this.setting.anchorTop;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorTopPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorTopPct = null;\r\n                this.setting.anchorTop = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    anchorBottom: {\r\n        get: function () {\r\n            return this.setting.anchorBottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.anchorBottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.anchorBottomPct = null;\r\n                this.setting.anchorBottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    verticalAlign: {\r\n        get: function () {\r\n            return this.setting.verticalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.verticalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    horizontalAlign: {\r\n        get: function () {\r\n            return this.setting.horizontalAlign;\r\n        },\r\n        set: function (val) {\r\n            this.setting.horizontalAlign = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    tint: {\r\n        get: function () {\r\n            return this.setting.tint;\r\n        },\r\n        set: function (val) {\r\n            this.setting.tint = val;\r\n            this.update();\r\n        }\r\n    },\r\n    alpha: {\r\n        get: function () {\r\n            return this.setting.alpha;\r\n        },\r\n        set: function (val) {\r\n            this.setting.alpha = val;\r\n            this.container.alpha = val;\r\n        }\r\n    },\r\n    rotation: {\r\n        get: function () {\r\n            return this.setting.rotation;\r\n        },\r\n        set: function (val) {\r\n            this.setting.rotation = val;\r\n            this.container.rotation = val;\r\n        }\r\n    },\r\n    blendMode: {\r\n        get: function () {\r\n            return this.setting.blendMode;\r\n        },\r\n        set: function (val) {\r\n            this.setting.blendMode = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotX: {\r\n        get: function () {\r\n            return this.setting.pivotX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivotY: {\r\n        get: function () {\r\n            return this.setting.pivotY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    pivot: {\r\n        set: function (val) {\r\n            this.setting.pivotX = val;\r\n            this.setting.pivotY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleX: {\r\n        get: function () {\r\n            return this.setting.scaleX;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scaleY: {\r\n        get: function () {\r\n            return this.setting.scaleY;\r\n        },\r\n        set: function (val) {\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    scale: {\r\n        set: function (val) {\r\n            this.setting.scaleX = val;\r\n            this.setting.scaleY = val;\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    left: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.leftPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.leftPct = null;\r\n                this.setting.left = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    right: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.rightPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.rightPct = null;\r\n                this.setting.right = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    top: {\r\n        get: function () {\r\n            return this.setting.top;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.topPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.topPct = null;\r\n                this.setting.top = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    bottom: {\r\n        get: function () {\r\n            return this.setting.bottom;\r\n        },\r\n        set: function (val) {\r\n            if (isNaN(val) && val.indexOf('%') !== -1) {\r\n                val = val.replace('%', '');\r\n                this.setting.bottomPct = parseFloat(val) * 0.01;\r\n            }\r\n            else {\r\n                this.setting.bottomPct = null;\r\n                this.setting.bottom = val;\r\n            }\r\n            this.updatesettings();\r\n        }\r\n    },\r\n    x: {\r\n        get: function () {\r\n            return this.setting.left;\r\n        },\r\n        set: function (val) {\r\n            this.left = val;\r\n        }\r\n    },\r\n    y: {\r\n        get: function () {\r\n            return this.setting.right;\r\n        },\r\n        set: function (val) {\r\n            this.top = val;\r\n        }\r\n    },\r\n    draggable: {\r\n        get: function () {\r\n            return this.setting.draggable;\r\n        },\r\n        set: function (val) {\r\n            if (val)\r\n                this.initDraggable();\r\n            else\r\n                this.clearDraggable();\r\n        }\r\n    },\r\n    dragRestricted: {\r\n        get: function () {\r\n            return this.setting.dragRestricted;\r\n        },\r\n        set: function (val) {\r\n            this.setting.dragRestricted = val;\r\n        }\r\n    },\r\n    dragGroup: {\r\n        get: function () {\r\n            return this.setting.dragGroup;\r\n        },\r\n        set: function (val) {\r\n            this.setting.dragGroup = val;\r\n        }\r\n    },\r\n    dragContainer: {\r\n        get: function () {\r\n            return this.setting.dragContainer;\r\n        },\r\n        set: function (val) {\r\n            this.setting.dragContainer = val;\r\n        }\r\n    },\r\n    droppable: {\r\n        get: function () {\r\n            return this.setting.droppable;\r\n        },\r\n        set: function (val) {\r\n            if (val)\r\n                this.initDroppable();\r\n            else\r\n                this.clearDroppable();\r\n        }\r\n    },\r\n});\r\n\r\n\r\n","/**\r\n * Settings object for all UIObjects\r\n *\r\n * @class\r\n * @memberof PIXI.UI\r\n */\r\nfunction UISettings() {\r\n    this._width = 0;\r\n    this.width = 0;\r\n    this.widthPct = null;\r\n    this._height = 0;\r\n    this.height = 0;\r\n    this.heightPct = null;\r\n    this.minWidth = 0;\r\n    this.minWidthPct = null;\r\n    this.minHeight = 0;\r\n    this.minHeightPct = null;\r\n    this.maxWidth = null;\r\n    this.maxWidthPct = null;\r\n    this.maxHeight = null;\r\n    this.maxHeightPct = null;\r\n    this.left = null;\r\n    this.leftPct = null;\r\n    this.right = null;\r\n    this.rightPct = null;\r\n    this.top = null;\r\n    this.topPct = null;\r\n    this.bottom = null;\r\n    this.bottomPct = null;\r\n    this.anchorLeft = null;\r\n    this.anchorLeftPct = null;\r\n    this.anchorRight = null;\r\n    this.anchorRightPct = null;\r\n    this.anchorTop = null;\r\n    this.anchorTopPct = null;\r\n    this.anchorBottom = null;\r\n    this.anchorBottomPct = null;\r\n    this.pivotX = null;\r\n    this.pivotY = null;\r\n    this.scaleX = null;\r\n    this.scaleY = null;\r\n    this.verticalAlign = null;\r\n    this.horizontalAlign = null;\r\n    this.rotation = null;\r\n    this.blendMode = null;\r\n    this.tint = null;\r\n    this.alpha = null;\r\n    this.draggable = null;\r\n    this.dragRestricted = false;\r\n    this.dragGroup = null;\r\n    this.dragContainer = null;\r\n    this.droppable = null;\r\n}\r\n\r\n\r\nmodule.exports = UISettings;\r\n\r\n\r\n","\r\nvar Library = {\r\n    UI: require('./UI')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI, Library);\r\n\r\nmodule.exports = Library;\r\n"],"sourceRoot":"."}